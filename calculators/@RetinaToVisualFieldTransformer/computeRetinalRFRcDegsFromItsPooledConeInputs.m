function [RFcenterRcDegs, RF2D] = computeRetinalRFRcDegsFromItsPooledConeInputs(coneRcDegs, conePosDegs, spatialSupportDegs)
    
    [Xdegs,Ydegs] = meshgrid(spatialSupportDegs(:,1), spatialSupportDegs(:,2));

    conesNumPooledByRFcenter = size(conePosDegs,1);
    for iCone = 1:conesNumPooledByRFcenter
  
        theConeApertureRF = exp(-((Xdegs-conePosDegs(iCone,1))/coneRcDegs).^2).*exp(-((Ydegs-conePosDegs(iCone,2))/coneRcDegs).^2);
        
        if (iCone == 1)
            RF2D = theConeApertureRF;
        else
            RF2D = RF2D + theConeApertureRF;
        end
    end
    RF2D = RF2D / max(RF2D(:));

    centroidOfPooledCones = mean(conePosDegs,1);

    initialParams = [...
        max(RF2D(:)), ...
        centroidOfPooledCones(1), ...
        coneRcDegs * sqrt(conesNumPooledByRFcenter), ...
        centroidOfPooledCones(2), ...
        coneRcDegs * sqrt(conesNumPooledByRFcenter), ...
        0];

    lowerBounds = [...
        0, ...
        centroidOfPooledCones(1), ...
        coneRcDegs, ...
        centroidOfPooledCones(2), ...
        coneRcDegs, ...
        -180];

    upperBounds = [...
        10, ...
        centroidOfPooledCones(1), ...
        coneRcDegs*conesNumPooledByRFcenter, ...
        centroidOfPooledCones(2), ...
        coneRcDegs*conesNumPooledByRFcenter, ...
        360];

    [theFittedGaussianCharacteristicRadiusDegs, theFittedGaussianEllpsoid, XYcenter, XRange, YRange, theFittedGaussianCharacteristicRadiiDegs] = ...
        RetinaToVisualFieldTransformer.fitGaussianToPooledConeApertures(spatialSupportDegs(:,1), spatialSupportDegs(:,2), RF2D, ...
        initialParams, lowerBounds, upperBounds);

    % Return the max of the 2 characteristic radii
    RFcenterRcDegs = max(theFittedGaussianCharacteristicRadiiDegs); %theFittedGaussianCharacteristicRadiusDegs; % min(theFittedGaussianCharacteristicRadiiDegs);

    debugFitGaussianToPooledConeApertures = false;
    if (debugFitGaussianToPooledConeApertures)
        figure(234); clf;
        zLevels = 0.05:0.1:1;
        subplot(1,2,1);
        contourf(spatialSupportDegs(:,1), spatialSupportDegs(:,2), RF2D, zLevels);
        hold on;
        contour(spatialSupportDegs(:,1), spatialSupportDegs(:,2), theFittedGaussianEllpsoid, zLevels, 'LineColor', 'r');
        axis 'image'; axis 'xy'
        set(gca, 'XLim', 0.05*[-1 1], 'YLim', 0.05*[-1 1], 'CLim', [0 1])
    
        colormap(gray(1024))
        pause
    end

end