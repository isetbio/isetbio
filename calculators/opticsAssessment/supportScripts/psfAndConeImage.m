function [psfImage, coneImage, mosaicNyquistFrequencyCPD, psfSupportArcMin, zCoeffs] = psfAndConeImage(mosaicEcc, opticsParams)

    mosaicEccMicrons = 1e3 * RGCmodels.Watson.convert.rhoDegsToMMs(mosaicEcc);
    coneSpacingDegs = RGCmodels.Watson.compute.rfSpacingAtRetinalPositions(...
        opticsParams.whichEye, mosaicEccMicrons, 'cones', false);
    
    mosaicSizeDegs = coneSpacingDegs * 10;
    wavelength = 550;
    % Generate mosaic centered at target eccentricity
    cm = cMosaic(...
        'sizeDegs', mosaicSizeDegs*[1 1], ...    % SIZE in degs
        'eccentricityDegs', mosaicEcc, ...       % ECC in degs
        'customDegsToMMsConversionFunction', @RGCmodels.Watson.convert.rhoDegsToMMs, ...
        'customMMsToDegsConversionFunction', @RGCmodels.Watson.convert.rhoMMsToDegs, ...
        'wave', wavelength, ...
        'opticalImagePositionDegs', 'mosaic-centered', ...
        'whichEye', opticsParams.whichEye ...
        );
    
    if (isempty(cm.coneRFspacingsDegs))
        coneImage = [];
        psfImage = [];
        mosaicNyquistFrequencyCPD = [];
        psfSupportArcMin = []; 
        zCoeffs = [];
        return;
    end
    
    
    % Compte Nyquist frequency based on mean cone spacing in the mosaic
    mosaicNyquistFrequencyCPD = 1/(2*mean(cm.coneRFspacingsDegs));

    wavefrontSpatialSamples = 901;
    
    if (strcmp(opticsParams.zernikeDataBase, 'Artal2012'))

        [oiEnsemble, psfEnsemble, zCoeffs] = ...
                cm.oiEnsembleGenerate(mosaicEcc, ...
                'zernikeDataBase', opticsParams.zernikeDataBase, ...
                'subjectID', opticsParams.subjectID, ...
                'pupilDiameterMM', opticsParams.pupilDiameterMM, ...
                'subtractCentralRefraction', opticsParams.subtractCentralRefraction, ...
                'wavefrontSpatialSamples', wavefrontSpatialSamples, ...
                'zeroCenterPSF', opticsParams.zeroCenterPSF, ...
                'flipPSFUpsideDown', opticsParams.flipPSFUpsideDown);
 
        psf = psfEnsemble{1};
        
%          wavelengthsListToCompute = 550;
%          [theOI, thePSF, psfSupportMinutesX, psfSupportMinutesY, psfSupportWavelength, zCoeffs] = ArtalOptics.oiForSubjectAtEccentricity(...
%              opticsParams.subjectID, opticsParams.whichEye, mosaicEcc, ...
%              opticsParams.pupilDiameterMM, wavelengthsListToCompute, cm.micronsPerDegree, ...
%              'subtractCentralRefraction', opticsParams.subtractCentralRefraction, ...
%              'wavefrontSpatialSamples', wavefrontSpatialSamples, ...
%              'zeroCenterPSF', opticsParams.zeroCenterPSF, ...
%              'flipPSFUpsideDown', opticsParams.flipPSFUpsideDown);
% 
%          psf = struct(...
%                     'data', thePSF, ...
%                     'supportX', psfSupportMinutesX, ...
%                     'supportY', psfSupportMinutesY, ...
%                     'supportWavelength', psfSupportWavelength);
                
 
                
    elseif (strcmp(opticsParams.zernikeDataBase, 'Polans2015'))
        [oiEnsemble, psfEnsemble, zCoeffs] = ...
                cm.oiEnsembleGenerate(mosaicEcc, ...
                'zernikeDataBase', opticsParams.zernikeDataBase, ...
                'subjectID', opticsParams.subjectID, ...
                'pupilDiameterMM', opticsParams.pupilDiameterMM, ...
                'subtractCentralRefraction', opticsParams.subtractCentralRefraction, ...
                'wavefrontSpatialSamples', wavefrontSpatialSamples, ...
                'zeroCenterPSF', opticsParams.zeroCenterPSF, ...
                'flipPSFUpsideDown', opticsParams.flipPSFUpsideDown);
 
        psf = psfEnsemble{1};
        
    elseif (strcmp(opticsParams.zernikeDataBase, 'Thibos'))
        
        measPupilSizeMM = 7.5;
        inFocusWavelength = 550;
        wavelengthsListToCompute = 550;
        
        [~, ~, subject_coeffs] = wvfLoadThibosVirtualEyes(measPupilSizeMM);
        
        if (strcmp(opticsParams.whichEye, 'right eye'))
            zCoeffs = subject_coeffs.rightEye(:,opticsParams.subjectID);
        else
            zCoeffs = subject_coeffs.leftEye(:,opticsParams.subjectID);
        end

        [thePSF, ~, ~,~, psfSupportMinutesX, psfSupportMinutesY, theWVF] = ...
            computePSFandOTF(zCoeffs, ...
                wavelengthsListToCompute, wavefrontSpatialSamples, ...
                measPupilSizeMM, ...
                opticsParams.pupilDiameterMM, inFocusWavelength, false, ...
                'doNotZeroCenterPSF', true, ...
                'micronsPerDegree', cm.micronsPerDegree, ...
                'flipPSFUpsideDown', true, ...
                'name', sprintf('Thibos subject %d', opticsParams.subjectID));
            
        psf = struct(...
                    'data', thePSF, ...
                    'supportX', psfSupportMinutesX, ...
                    'supportY', psfSupportMinutesY, ...
                    'supportWavelength', wavelengthsListToCompute);
        
    end
    
    if isnan(min(psf.data(:))) || isnan(max(psf.data(:)))
        psfImage = [];
        coneImage = []; 
        psfSupportArcMin = [];
        return;
    end
    
    % Make PSF image
    [~,idx] = min(abs(psf.supportWavelength-wavelength));
    psfImage = squeeze(psf.data(:,:,idx));
     
    psfSupportMicrons = cm.micronsPerDegree * psf.supportX/60;
    [Xorig,Yorig] = meshgrid(psfSupportMicrons,psfSupportMicrons);
     
    interpolationSamples = 1024;
    psfSupportMicrons = linspace(psfSupportMicrons(1), psfSupportMicrons(end), interpolationSamples);
    [Xhires,Yhires] = meshgrid(psfSupportMicrons,psfSupportMicrons);
    psfImage = interp2(Xorig, Yorig, psfImage, Xhires, Yhires);
    psfImage = psfImage / max(psfImage(:));
    psfSupportArcMin = psfSupportMicrons / cm.micronsPerDegree * 60;
    
    % Make cone image
    coneImage = Xhires*0;
    r = sqrt(Xhires.^2 + Yhires.^2);
    
    % Cone aperture radius
    apertureRadiusMicrons = 0.5*cm.coneApertureToDiameterRatio*mean(cm.coneRFspacingsMicrons);
    coneImage(find(r<=apertureRadiusMicrons)) = 1;
 
     
end