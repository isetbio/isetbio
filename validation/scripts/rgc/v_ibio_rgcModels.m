function varargout = v_rgcModels(varargin)
%
% Validation script for RGC spiking.
%
% Test the RGC responses to a simple stimlus, e.g. a moving bar.  We
% compare these responses to validation data (regression test).
%
% The RGC response is computed for different types of computational models:
%
%   1. OS = linear,  bipolar = linear,  RGC = LNP
%   2. OS = linear,  bipolar = linear,  RGC = GLM (coupled)
%   3. OS = linear,  bipolar = subunit, RGC = LNP
%   4. OS = linear,  bipolar = subunit, RGC = GLM (coupled)
%   5. OS = biophys, bipolar = linear,  RGC = LNP
%   6. OS = biophys, bipolar = linear,  RGC = GLM (coupled)
%   7. OS = biophys, bipolar = subunit, RGC = LNP
%   8. OS = biophys, bipolar = subunit, RGC = GLM (coupled)
%
% There are differences between the spiking activity for the different
% combinations of OS, bipolar and RGC. This script compares the responses
% of each simulation from a certain isetbio github commit and checks it
% with the same simulation in the current commit. If there have been no
% changes that affect the value of the PSTH for each simulation, the
% validationRun variable will have entries close to zero (< 0.01).
%
% Movies of the PSTH are shown for each simulation. 
%
% 8/2016 JRG (c) isetbio team
%   
% If we uncomment this and some of the code below, this calculation will
% fit into the Unit Test framework
%
%     varargout = UnitTest.runValidationRun(@ValidationFunction, nargout, varargin);
% end

%% Function implementing the isetbio validation code
% function ValidationFunction(runTimeParams)

clearvars
rng(1237);             % Set for repeatbility
showSpikesFlag  = 0;   % Shows spike responses
showLinearFlag = 1;    % Shows the linear RGC values 

% Set up the various possible conditions
osFlag      = [0 0 0 0 1 1 1 1]; % 0 = osLinear,        1 = osBioPhys
bipolarFlag = [0 0 1 1 0 0 1 1]; % 0 = bipolar linear,  1 = bipolar rectify
rgcFlag     = [0 1 0 1 0 1 0 1]; % 0 = rgc uncoupled,   1 = rgc coupled

linearTest = cell(length(osFlag),1);
psthTest = cell(length(osFlag),1);

%% Read cone mosaic data from the RDT

rdt = RdtClient('isetbio');
rdt.crp('/resources/data/istim');

% Print out the files in this directory
% rdt.listArtifacts('type', 'mat','print',true);

%% These data were generated by t_rgcBar.m
data  = rdt.readArtifact('barMovie_osLinear', 'type', 'mat');
cMosaic_osLinear = data.iStim.cMosaic;

data = rdt.readArtifact('barMovie_osBioPhys', 'type', 'mat');
cMosaic_osBioPhys = data.iStim.cMosaic;

clear data;

% To see the movie use this:
% cMosaic_osBioPhys.window;

%% Loop over the eight conditions

for flagInd = 1:length(osFlag)
    
    tic;
    fprintf('\nosFlag %d - bipolarFlag %d - rgcFlag %d - ', ...
        osFlag(flagInd),bipolarFlag(flagInd), rgcFlag(flagInd));
    
    % Choose cmosaic for this conditions
    switch osFlag(flagInd)
        case 0 % osLinear
            cMosaic = cMosaic_osLinear;
        case 1 % osBioPhys
            cMosaic = cMosaic_osBioPhys;
    end
    cMosaic.computeCurrent();
    
    % Compute the bipolar response
    fprintf('Bipolar compute ...');
    switch bipolarFlag(flagInd)
        case 0 % linear bipolar
            
            % bpParams.coneType = cMosaic.pattern;
            % bp = bipolar(cMosaic.os,bpParams);
            bp = bipolar(cMosaic);
        case 1 % subunit bipolar
            
            % bpParams.coneType = cMosaic.pattern;
            % bp = bipolar(cMosaic.os,bpParams);
            bp = bipolar(cMosaic,'rectifyType',2);
    end
    
    bp.compute(cMosaic);
    
    % bp.plot('movie response')
    
    % Set RGC mosaic parameters
    fprintf('Inner retina compute ...');
    
    clear params innerRetinaSU
    cellType = 'onParasol';
    % cellType = 'offParasol';
    params.name = 'macaque phys';
    params.eyeSide = 'left';
    params.eyeRadius = 0;
    params.eyeAngle = 0; 
    
    % Create RGC object
    innerRetinaSU = ir(bp, params);
    innerRetinaSU.mosaicCreate('type',cellType,'model','GLM');
    
    nTrials = 4; innerRetinaSU = irSet(innerRetinaSU,'numberTrials',nTrials);
    
    % Compute the inner retina response
    switch rgcFlag(flagInd)
        case 0 % no coupling
            innerRetinaSU = irCompute(innerRetinaSU, bp);
        case 1 % coupling
            innerRetinaSU = irCompute(innerRetinaSU, bp, 'coupling', true);
    end
    
    % fprintf('Elapsed time:  %.1f\n',toc);
    
    % Make the PSTH movie
    % lastTime = innerRetinaSU.mosaic{1}.get('last spike time');
    innerRetinaSU.mosaic{1}.set('dt',1);
    
    linearTest{flagInd} = innerRetinaSU.mosaic{1}.get('response linear');
    psthTest{flagInd} = innerRetinaSU.mosaic{1}.get('psth');
    
    % View movie of RGC linear response
    clear vParams
    vParams.FrameRate = 5; vParams.step = 2; vParams.show = true;
    
    % View movie of PSTH for mosaic
    if showSpikesFlag
        %         vcNewGraphWin;
        %         ieMovie(linearTest{flagInd},vParams);
    
        steadyStateFrame = 50; % Get rid of transient spiking
        vcNewGraphWin; 
        ieMovie(psthTest{flagInd}(:,:,steadyStateFrame:end),vParams);
    end
end
fprintf('\n');

%% Plot linear response
if showLinearFlag
    vcNewGraphWin;
    % set(gcf,'position',[    183         586        2216         752]);
    for flagInd = 1:8
        subplot(2,4,flagInd)
        plot(RGB2XWFormat(linearTest{flagInd})');
        xlabel('Time (msec)');
        ylabel(sprintf('Linear Response\n(Conditional Probability Intensity'));
        title(sprintf('os %d, bp %d, rgc %d',osFlag(flagInd),bipolarFlag(flagInd), rgcFlag(flagInd)));
        axis([0 160 0 6.5]);
    end
end

%% Some notes for validation script ...
%
% Will be deprecated when we have the full validation script written.
%
% The validation might be something like
%   Take the mean absorptions and calculate them as a single number
%   Do an assert that the number is preserved within epsilon when we rerun
%   to validate
%
%   Or a sha number or other code and check that the time series validates
%   against it.
%  
%   We need to be able to freeze the noise!
%

% load([isetbioRootPath '/local/v_rgcModels_output.mat'],'psth');
% fname = fullfile(isetbioRootPath,'local','v_rgcModels_output.mat');
data = rdt.readArtifact('v_rgcModels_output', 'type', 'mat');
psth = data.psth; linearResponse = data.linearResponse; clear data;

for flagInd = 1:length(osFlag)
    validationTemp = psth{flagInd,1}  - psthTest{flagInd,1};
    validationRun(flagInd) = sum(validationTemp(:))./sum(psth{flagInd,1}(:));
    
    validationLinearTemp = linearTest{flagInd,1}  - linearResponse{flagInd,1};
    validationLinearRun(flagInd) = sum(validationLinearTemp(:))./sum(linearResponse{flagInd,1}(:));
end

validationRun
% validationLinearRun

% Unit test framework
% u = UnitTest;
% u.assertIsZero(0,'psth',1e-12);

% Save validation data
% psth = psthTest; save([isetbioRootPath '/local/v_rgcModels_output.mat'],'psthTest');

end
