%% Human Wavelength Discrimination
% Calculate the cone absorptions when we discriminate two lights with slightly 
% different wavelengths.  This is the basis for the color discrimination decision.
% 
% This script calculates the cone absorptions as we increase the mean luminance 
% levels. The absorption data generated by the two wavelengths become better separated 
% as the mean illumination level grows.
% 
% This script also shows some of the details of how to create the cone mosaic.
% 
% ISETBIO Team, 2016
%% Initialize

ieInit
rng('default');  % To achieve the same result each time

%% Create a sample human optics and cone mosaic sensor
% Standard optics and human retina simulations can be created this way. You 
% can also change the parameters from the standard, say for simulating the periphery 
% or for simulating people with biological variability.

% Human optics
oi = oiCreate('human'); 
% vcAddObject(oi);

% Create a typical cone mosaic and show a little picture
cSensor = coneMosaic;
cSensor.plot('cone mosaic');
%% Compute cone absorption as a function of mean signal level
% We will image uniform fields of monochrome light on a human sensor. Then get 
% the photon absorptions in a 100 ms flash. THen we plot the absorptions as a 
% 3D graph in the next cell.

% These are the two wavelengths and the list of scene luminance levels
wSamples = [520  530];   nWave = length(wSamples);
luminance = [10 50 200]; nLevels = length(luminance);
sceneSize = 128;

% We will extract the cone absorptions for plotting into these variables
L = cell(1,length(wSamples));
M = cell(1,length(wSamples));
S = cell(1,length(wSamples));

% Make a series of scenes at different wavelengths and peak readiances.
% Then, compute the sensor response.
scene  = cell(1,nWave);

cMosaic = coneMosaic;
cMosaic.integrationTime = 0.10;  % 100 ms
% cMosaic.window;

%% Plot cone absorptions as 3D

vcNewGraphWin([],'tall');  % One window for each level.

for rr = 1:nLevels
    for ww=1:length(wSamples)
        
        % Create a monochromatic scene and set the radiance
        % The wavelength is specified in wSamples.
        scene{ww} = sceneCreate('uniform monochromatic',wSamples(ww),sceneSize);
        scene{ww} = sceneAdjustLuminance(scene{ww},luminance(rr));
        
        % Compute the spectral irradiance at the retina
        oi = oiCompute(scene{ww},oi,'pad value','mean');
        
        % Compute the absorptions
        cMosaic.compute(oi);
        
        % Retrieve the cone absorptions
        L{ww} = cMosaic.coneAbsorptions('coneType','l');
        M{ww} = cMosaic.coneAbsorptions('coneType','m');
        S{ww} = cMosaic.coneAbsorptions('coneType','s');
        
        % For simplicity in plotting, make the absorptions same length
        n = min(100,length(L{ww}));
        S{ww} = S{ww}(1:n); M{ww} = M{ww}(1:n); L{ww} = L{ww}(1:n);
    end
    
    az = 65.5; el = 30;
    sMax = 30;
    subplot(nLevels,1,rr)
    for ww=1:length(wSamples)
        s = mod(ww,length(sym))+1;
        scatter3(L{ww}(:),M{ww}(:),S{ww}(:),'filled')
        view([az el]); % set(gca,'zlim',[0 sMax]);
        hold on
        xlabel('L-absorptions'); ylabel('M-Absorptions');
        zlabel('S-absorptions'); axis square; grid on
    end
    title(sprintf('%.0f cd/m^2',luminance(rr)));
end