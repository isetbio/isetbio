classdef rgcGLM < rgcMosaic
% rgcMosaic using a GLM (coupled-nonlinear) computational model
%
% Syntax:
%   obj = rgcMosaic;
%
% Description:
%    rgcGLM is a subclass of rgcMosaic that uses the GLM model. Typically
%    it is invoked by a call from the inner retina object
%
%      ir.mosaicCreate('model', 'GLM', 'type', 'your type goes here')
%
%    The coupled GLM model is published in Pillow, Shlens, Paninski, Sher,
%    Litke, Chichilnisky & Simoncelli, Nature (2008).
%
%    The computational model implemented here relies on code by the:
%    <a href="matlab: web(http://pillowlab.princeton.edu/code_GLM.html',
%    '-browser')">Pillow Lab</a>. , which is distributed under the GNU
%    General Public License.
%
%   ISETBIO wiki: <a href="matlab: web(...
%       'https://github.com/isetbio/isetbio/wiki/Retinal-ganglion-cells',
%       '-browser')">RGCS</a>.
%
%    This function contains examples of usage inline. To access these, type
%    'edit rgcGLM.m' into the Command Window.
%
% See Also:
%   rgcMosaic.m, rgcLNP.m
%

% History:
%    09/XX/15  JRG  (c) isetbio team
%    07/XX/16  JRG  updated
%    06/21/19  JNM  Documentation pass

% Examples:
%{
    % ETTBSkip - skipping broken examples
    %
    % This needs code to define ir before it could
    % possibly work.
    ir.mosaicCreate('model', 'GLM', 'type', 'on midget');
%}

%% Properties
    properties (SetAccess = public, GetAccess = public)
        % DT Parameter to specify the time bins Pillow uses for coupling
        % and post spike filters (.01 = 100 bins per linear time sample)
        dt = 0.1;
    end

    properties (SetAccess = private, GetAccess = public)
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % rgcGLM is a subclass of rgcMosaic.
        % See the rgcMosaic superclass for many more properties
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        % GENERATORFUNCTION Pillow promotes the linear input voltage using
        % a nonlinear function that he calls the generator function. By
        % default this is an exponential.
        generatorFunction;

        % RESPONSEVOLTAGE The nonlinear voltage response after application
        % of the generator function and the spike coupling responses is
        % represented here
        responseVoltage;

        % POSTSPIKEFILTER These hold the parameters used in the
        % computation. This is the response after a spike
        postSpikeFilter;

        % COUPLINGFILTER This is the time course of the voltage responses
        % generated by a spike and propagated to nearby neurons
        couplingFilter;

        % COUPLINGMATRIX The matrix of connections between nearby neurons
        couplingMatrix;
    end

    % Private properties. Only methods of the parent class can set these
    properties(Access = private)
    end

%% Methods
    % Public methods
    methods
        function obj = rgcGLM(rgcL, bipolarM, cellType, varargin)
            % Constructor
            %
            % Syntax:
            %   obj = rgcGLM(rgcL, bipolarM, cellType, [varargin])
            %
            % Description:
            %    The constructor for the rgcGLM class.class.
            %
            % Inputs:
            %    rgcL     - Object. An rgc Layer object.
            %    bipolarM - Object. A bipolar mosaic object.
            %    cellType - String. A string indicating the cell type.
            %
            % Outputs:
            %    obj      - Object. a rgc mosaic object of model LNP.
            %
            % Optional key/value pairs:
            %    coupling - Boolean. A boolean indicating the presence or
            %               absence of coupling. Default false.
            %

            p = inputParser;
            p.KeepUnmatched = true;

            p.addRequired('rgcL', @(x)(isequal(class(x), 'rgcLayer')));
            p.addRequired('bipolarM', ...
                @(x)(isequal(class(x), 'bipolarMosaic')));
            p.addRequired('cellType', @ischar); % Could check better

            p.addParameter('coupling', false, @islogical);
            p.parse(rgcL, bipolarM, cellType, varargin{:});

            % Initialize the mosaic parent class
            obj = obj@rgcMosaic(rgcL, bipolarM, cellType, varargin{:});

            % The Pillow generator function
            obj.generatorFunction = @exp;

            % Effect of a spike on output voltages
            obj.postSpikeFilter = buildPostSpikeFilter(obj.dt);

            % Coupling filters between nearby ganglion cells
            if p.Results.coupling
                [obj.couplingFilter, obj.couplingMatrix] = ...
                    buildCouplingFilters(obj, obj.dt);
            end
        end
    end

    methods (Access = public)
    end

    % Methods may be called by the subclasses, but are otherwise private
    methods (Access = protected)
    end

    % Methods that are totally private (subclasses cannot call these)
    methods (Access = private)
    end

end
