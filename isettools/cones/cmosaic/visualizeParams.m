function params = visualizeParams(mode)
% User wants to return a struct with a list of parameters
% This can be set and passed in as the varargin.

if notDefined('mode'), mode = 'params'; end

visualizationParamsStruct.domain = struct(...
    'default', 'degrees', ...
    'docString', 'Choose between {''degrees'', ''microns''}');

visualizationParamsStruct.domainVisualizationLimits = struct(...
    'default', [], ...
    'docString', 'Limits for visualization. Either [], or a 4-element vector, [xMin xMax yMin yMax]' ...
    );

visualizationParamsStruct.domainVisualizationTicks = struct(...
    'default', [], ...
    'docString', 'Ticks for visualization. Either [], or a struct with the following content, struct(''x'', -10:1:10, ''y'', -5:1:5)' ...
    );

visualizationParamsStruct.visualizedConeAperture = struct(...
    'default', 'geometricArea', ...
    'docStringA', 'For pillbox apertures,  choose between {''geometricArea'', ''coneSpacing'', ''lightCollectingArea''}', ...
    'docStringB', 'For Gaussian apertures, choose between {''geometricArea'', ''coneSpacing'', ''lightCollectingAreaCharacteristicDiameter'', ''lightCollectingArea2sigma'', ''lightCollectingArea4sigma'', ''lightCollectingArea5sigma'', ''lightCollectingArea6sigma''}' ...
    );

visualizationParamsStruct.visualizedConeApertureThetaSamples = struct(...
    'default', [], ...
    'docString', 'Number of angular samples to represent the visualized cone aperture, e.g., 6 for a hexagonal-shaped aperture' ...
    );

visualizationParamsStruct.visualizeCones = struct(...
    'default', true, ...
    'docString', 'Flag indicating whether to visual cones. You can set it to false when visualizing the cone density' ...
    );

visualizationParamsStruct.labelCones = struct(...
    'default', true, ...
    'docString', 'Flag indicating whether to color-code the visualized cones according to the their type: L, M, S etc' ...
    );

visualizationParamsStruct.labelConesWithIndices = struct(...
    'default', [], ...
    'docString', 'Either [], in which case all cones are labeled, or a list of indices specifying the cones to be labeled according to their type' ...
    );

visualizationParamsStruct.densityContourOverlay  = struct(...
    'default', false, ...
    'docString', 'Flag indicating whether to superimpose a contour map of cone density on top of the cone mosaic' ...
    );

visualizationParamsStruct.densityContourLevels = struct(...
    'default', [], ...
    'docString', 'Either [] or a vector of levels for which to draw iso-density contours' ...
    );

visualizationParamsStruct.densityContourLevelLabelsDisplay = struct(...
    'default', false, ...
    'docString', 'Flag indicating whether to label the iso-density contours' ...
    );

visualizationParamsStruct.densityColorMap = struct(...
    'default', [], ...
    'docString', 'Either [] or a [nx3] matrix of RGB values for the density map' ...
    );

visualizationParamsStruct.activation = struct(...
    'default', [], ...
    'docString', 'Either [] or a [1xnCones] matrix of activation values returned by cMosaic.compute()' ...
    );

visualizationParamsStruct.activationRange = struct(...
    'default', [], ...
    'docString', 'Either [] or a [1x2] vector of the visualized minimum and maximum activation values' ...
    );

visualizationParamsStruct.activationColorMap  = struct(...
    'default', [], ...
    'docString', 'Either [] or a [nx3] matrix of RGB values for the activation map' ...
    );

visualizationParamsStruct.verticalDensityColorBar = struct(...
    'default', false, ...
    'docString', 'Flag indicating whether to add a vertically-oriented colorbar showing the color-coding of the density map' ...
    );

visualizationParamsStruct.verticalActivationColorBar = struct(...
    'default', false, ...
    'docString', 'Flag indicating whether to add a vertically-oriented colorbar showing the color-coding of the activation map' ...
    );
visualizationParamsStruct.horizontalActivationColorBar = struct(...
    'default', false, ...
    'docString', 'Flag indicating whether to add a horizontally-oriented colorbar showing the color-coding of the activation map' ...
    );

visualizationParamsStruct.verticalActivationColorBarInside = struct(...
    'default', false, ...
    'docString', 'Flag indicating whether to add a vertically-oriented colorbar showing the color-coding of the activation map. This colorbar is placed inside the density map.' ...
    );

visualizationParamsStruct.horizontalActivationColorBarInside = struct(...
    'default', false, ...
    'docString', 'Flag indicating whether to add a horizontally-oriented colorbar showing the color-coding of the activation map. This colorbar is placed inside the density map.' ...
    );

visualizationParamsStruct.colorBarTickLabelPostFix = struct(...
    'default', '', ...
    'docString', 'Either an empty string, or a string to append to the labels of the colorbar' ...
    );

visualizationParamsStruct.colorbarTickLabelColor = struct(...
    'default', [.9 .6 0.2], ...
    'docString', 'Either [], or a [1x3] vector of RGB values for the color of the colorbar ticks' ...
    );

visualizationParamsStruct.horizontalActivationSliceEccentricity = struct(...
    'default', [], ...
    'docString', 'Either empty or a scalar specifying the y-eccentricity through which to depict the activation of cones along the x-axis' ...
    );

visualizationParamsStruct.verticalActivationSliceEccentricity = struct(...
    'default', [], ...
    'docString', 'Either empty or a scalar specifying the x-eccentricity through which to depict the activation of cones along the y-axis' ...
    );

visualizationParamsStruct.crossHairsOnMosaicCenter = struct(...
    'default', false, ...
    'docString', 'Flag indicating whether to add cross-hairs located at the mosaic center' ...
    );

visualizationParamsStruct.crossHairsOnFovea = struct(...
    'default', false, ...
    'docString', 'Flag indicating whether to add cross-hairs located at the fovea' ...
    );

visualizationParamsStruct.crossHairsOnOpticalImageCenter = struct(...
    'default', false, ...
    'docString', 'Flag indicating whether to add cross-hairs located at the center of the optical image' ...
    );

visualizationParamsStruct.crossHairsColor = struct(...
    'default', [], ...
    'docString', 'Either [], or a [1x3] vector of RGB values for the color of the cross-hairs' ...
    );

visualizationParamsStruct.displayedEyeMovementData = struct(...
    'default', [], ...
    'docStringA', 'Either [], or a struct specifying which eye movement data (trial index & time points) to superimpose.', ...
    'docStringB', 'The struct should have the following format: struct(''trial'', 1:nTrials, ''timePoints'', timePoint1:timePoint2).', ...
    'docStringC', 'See t_cMosaicSingleEyeMovementPath.m for usage'...
    );

visualizationParamsStruct.currentEMposition = struct(...
    'default', [], ...
    'docStringA', 'Either [], or a [1x2] vector of the (x,y) coordinates of the current eye position', ...
    'docStringB', 'See t_cMosaicSingleEyeMovementPath.m for usage'...
    );

visualizationParamsStruct.labelRetinalMeridians = struct(...
    'default', false, ...
    'docString', 'Flag indicating whether to label the corresponding retinal meridians.' ...
    );

visualizationParamsStruct.noXLabel = struct(...
    'default', false, ...
    'docString', 'Flag indicating whether to avoid labeling the x-axis.' ...
    );

visualizationParamsStruct.noYLabel = struct(...
    'default', false, ...
    'docString', 'Flag indicating whether to avoid labeling the y-axis.' ...
    );

visualizationParamsStruct.figureHandle = struct(...
    'default', [], ...
    'docString', 'Either [], or the handle to an existing figure on which to render the mosaic' ...
    );

visualizationParamsStruct.axesHandle = struct(...
    'default', [], ...
    'docString', 'Either [], or the handle to existing axes on which to render the mosaic' ...
    );

visualizationParamsStruct.fontSize = struct(...
    'default', 16, ...
    'docString', 'The font size for the figure' ...
    );

visualizationParamsStruct.backgroundColor = struct(...
    'default', [], ...
    'docString', 'Either [], ''none'', or a [1x3] vector of RGB values for the axes background color' ...
    );

visualizationParamsStruct.plotTitle = struct(...
    'default', [], ...
    'docString', 'Either an empty string, or a string specifying the title displayed above the mosaic' ...
    );

visualizationParamsStruct.textDisplay = struct(...
    'default', [], ...
    'docString', 'Either an empty string, or a string specifying the text to be displayed at the bottom of the mosaic' ...
    );

visualizationParamsStruct.textDisplayColor = struct(...
    'default', [], ...
    'docString', 'Either [], or a [1x3] vector of RGB values for the displayed text' ...
    );


switch (mode)
    case 'params'
        % Return the params struct
        fNames = fieldnames(visualizationParamsStruct);
        for k = 1:numel(fNames)
            params.(fNames{k}) = visualizationParamsStruct.(fNames{k}).default;
        end

    case 'help'
        % Display the params struct along with information for each param
        visualizeParamsStructTree(visualizationParamsStruct, 'visualizationParams');
        params = '';
end
end