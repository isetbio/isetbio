function LeeShapleySTFanalysis(theDefaultMRGCMosaicSTFResponsesFullFileName, ...
	theDefaultLeeShapleyAnalysisFileName, ...
	targetedSurroundPurityRange , ...
    targetedRadialEccentricityRange, ...
    targetedCenterConeNumerosityRange, ...
    targetedCenterPurityRange , ...
    recomputeAnalysis, varargin)

    % Parse optional input
    p = inputParser;
    p.addParameter('limitVisualizedCKdataToTheEccentricititesOfSyntheticCells', false, @islogical);
    p.addParameter('fixedOptimalOrientation', [], @(x)(isnumeric(x)||(isnan(x))));
    p.parse(varargin{:});
    limitVisualizedCKdataToTheEccentricititesOfSyntheticCells = p.Results.limitVisualizedCKdataToTheEccentricititesOfSyntheticCells;
    fixedOptimalOrientation = p.Results.fixedOptimalOrientation;

    analyzedChromaticities = {'Achromatic', 'LconeIsolating', 'MconeIsolating'};
    for chromaticityIndex = 1:numel(analyzedChromaticities)
        % Filenames for current chromaticity
        theMRGCMosaicSTFResponsesFullFileName{chromaticityIndex} = strrep(theDefaultMRGCMosaicSTFResponsesFullFileName, ...
            'Achromatic', analyzedChromaticities{chromaticityIndex});
        theLeeShapleyAnalysisFileName{chromaticityIndex} = strrep(theDefaultLeeShapleyAnalysisFileName, ...
            'Achromatic', analyzedChromaticities{chromaticityIndex});
    end % chromaticityIndex

    if (recomputeAnalysis)
        for chromaticityIndex = 1:numel(analyzedChromaticities)
            load(theMRGCMosaicSTFResponsesFullFileName{chromaticityIndex}, 'theMRGCMosaic', 'stimParams', ...
                'theNoiseFreeSpatioTemporalMRGCMosaicResponses2DSTF', 'theMRGCMosaicResponseTemporalSupportSeconds');

            if (chromaticityIndex == 1)
                % All RGCs
                targetRGCindices = 1:theMRGCMosaic.rgcsNum;
                fprintf('Mosaic contains %d RGCs\n', numel(targetRGCindices));

                [targetRGCindices, theSurroundConePurities, theCenterConeDominances, ...
                theCenterConeNumerosities, theCenterConePurities] = theMRGCMosaic.indicesOfRGCsWithinTargetedPropertyRanges( ...
                            targetedCenterConeNumerosityRange, ...
                            targetedSurroundPurityRange, ...
                            targetedRadialEccentricityRange, ...
                            targetedCenterPurityRange);

                theAnalyzedOrientationIndices = zeros(1, numel(targetRGCindices));

                if (~isempty(targetedSurroundPurityRange))
                    fprintf('Targeted surround purity range: [%2.2f - %2.2f]\n', ...
                        targetedSurroundPurityRange(1), targetedSurroundPurityRange(2));
                end
                if (~isempty(targetedCenterConeNumerosityRange))
                    fprintf('Targeted center cone numerisity range: [%2.0f - %2.0f]\n', ...
                        targetedCenterConeNumerosityRange(1), targetedCenterConeNumerosityRange(2));
                end
                if (~isempty(targetedRadialEccentricityRange))
                    fprintf('Targeted radial eccentricity range: [%2.2f - %2.2f]\n', ...
                    targetedRadialEccentricityRange(1), targetedRadialEccentricityRange(2));
                end
                if (~isempty(targetedCenterPurityRange))
                    fprintf('Targeted center purity range: [%2.2f - %2.2f]\n', ...
                        targetedCenterPurityRange(1), targetedCenterPurityRange(2));
                end
                fprintf('There are %d RGCs within the above range(s)\n', numel(targetRGCindices));

                if isempty(fixedOptimalOrientation)
                     fprintf(2,'STF bandpass indices will be analyzed at the orientation for which the STF at half max extends to the highest SF\n');
                elseif isnan(fixedOptimalOrientation)
                     fprintf(2,'STF bandpass indices  will be analyzed at random orientations\n');
                elseif (isscalar(fixedOptimalOrientation))
                     fprintf(2,'STF bandpass indices  will be analyzed at a fixed orientation: %2.1f degs\n', fixedOptimalOrientation);
                 else
                    fprintf(2,'STF bandpass indices will be analyzed at fixed orientations, which are selected different for each cell\n');
                end

                if (numel(fixedOptimalOrientation)>1)
                    for iRGC = 1:numel(targetRGCindices)
                        theAnalyzedOrientationIndices(iRGC) = fixedOptimalOrientation(iRGC);
                    end
                else
                    for iRGC = 1:numel(targetRGCindices)
                        theAnalyzedOrientationIndices(iRGC) = fixedOptimalOrientation;
                    end
                end
            end  % if (chromaticityIndex == 1)

            theBPIs = zeros(1, numel(targetRGCindices));
            parfor iRGC = 1:numel(targetRGCindices)
                theRGCindex = targetRGCindices(iRGC);
                theSTFresponsesAtAllSFs = squeeze(theNoiseFreeSpatioTemporalMRGCMosaicResponses2DSTF(...
                    theAnalyzedOrientationIndices(iRGC),:,:,theRGCindex));
                theSTFamplitudeSpectrum = ...
                    RGCMosaicConstructor.helper.simulateExperiment.stfFromResponseTimeSeries(...
                        stimParams.spatialFrequencyCPD, theSTFresponsesAtAllSFs, ...
                        stimParams.spatialPhasesDegs, theMRGCMosaicResponseTemporalSupportSeconds);
                theBPIs(iRGC) = bandPassIndex(stimParams.spatialFrequencyCPD, theSTFamplitudeSpectrum);
            end % iRGC

            % Save the BPI data
            save(theLeeShapleyAnalysisFileName{chromaticityIndex}, ...
                'theBPIs', 'targetRGCindices', 'theCenterConeDominances', 'theSurroundConePurities', 'theCenterConePurities', 'theAnalyzedOrientationIndices');
            fprintf('Saved computed BPIs for chromaticity ''%s'' to %s\n', analyzedChromaticities{chromaticityIndex}, theLeeShapleyAnalysisFileName{chromaticityIndex});
        end % for chromaticityIndex
    end  % if (recomputeAnalysis)

    % Load computed data
    load(theLeeShapleyAnalysisFileName{1}, ...
            'theBPIs', 'targetRGCindices', 'theCenterConeDominances', 'theSurroundConePurities', 'theCenterConePurities', 'theAnalyzedOrientationIndices');
    theAchromaticBPIs = theBPIs;

    load(theLeeShapleyAnalysisFileName{2}, 'theBPIs');
    theLconeIsolatingBPIs = theBPIs;

    load(theLeeShapleyAnalysisFileName{3}, 'theBPIs');
    theMconeIsolatingBPIs = theBPIs;
        
    LconeCenterIndices = find(theCenterConeDominances == cMosaic.LCONE_ID);
    MconeCenterIndices = find(theCenterConeDominances == cMosaic.MCONE_ID);
        figure(1); clf;
        plot(theAchromaticBPIs(LconeCenterIndices), theLconeIsolatingBPIs(LconeCenterIndices), 'ro');
        hold on;
        plot(theAchromaticBPIs(MconeCenterIndices), theMconeIsolatingBPIs(MconeCenterIndices), 'go');
        
        axis 'square'
        set(gca, 'XLim', [0 1], 'YLim', [0 1]);
        xlabel('achromatic BPI');
        ylabel('center cone isolating BPI');
        numel(LconeCenterIndices)
        numel(MconeCenterIndices)



    targetString = 'mRGCMosaic_';
    startingIndex = strfind(theDefaultMRGCMosaicSTFResponsesFullFileName, targetString) + length(targetString)

    targetString = '_Achromatic';
    endingIndex = strfind(theDefaultMRGCMosaicSTFResponsesFullFileName, targetString)
    theOpticsSubstring = theDefaultMRGCMosaicSTFResponsesFullFileName(startingIndex:endingIndex);

    if (contains(theOpticsSubstring, 'adaptiveOptics'))
    elseif contains(theOpticsSubstring, 'nativeOptics')
    else
        error('No plotting for optics: ''%''.', theOpticsSubstring);
    end
    % Upper case the first letter
    theOpticsSubstring(1) = upper(theOpticsSubstring(1));

    % PLOT RESULTS
    LeeShapleyDataMarkerSize = 10;
    superimposeLeeShapleyData = true;
    onlyDepictLeeShapleyData = false;
    BPIinterval = 0.1;
    minNumberOfCellsPerBPIintervalForPercentilePlot = 5;
    thePercentileValues = [10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90];
    maxVisualizedBPIDensity = 1.0;

    % L+M-center RGCs, physiological optics
    figNo = 3000;
    RGCMosaicAnalyzer.visualize.centerConeIsolatingVsAchromaticBPIscatterPlot(figNo, ...
        cat(2, theAchromaticBPIs(LconeCenterIndices), theAchromaticBPIs(MconeCenterIndices)), ...
        cat(2, theLconeIsolatingBPIs(LconeCenterIndices), theMconeIsolatingBPIs(MconeCenterIndices)), ...
        cat(2, theSurroundConePurities(LconeCenterIndices), theSurroundConePurities(MconeCenterIndices)), ...
        [], ...
        '', ... % sprintf('%sBPIscatterPlot.pdf', theOpticsSubstring), ...
        '', ... % sprintf('%sBPIhistogramPlot.pdf', theOpticsSubstring), ...
        '', ... % sprintf('%sSurroundPurityPlot.pdf', theOpticsSubstring), ...
        '', ... %' sprintf('%sDensityPlot.pdf', theOpticsSubstring), ...
        sprintf('%sPercentilePlot.pdf', theOpticsSubstring), ...
        'maxVisualizedBPIDensity', maxVisualizedBPIDensity, ...
        'bpiInterval', BPIinterval, ...
        'minNumberOfCellsPerBPIintervalForPercentilePlot', minNumberOfCellsPerBPIintervalForPercentilePlot , ...
        'thePercentileValues', thePercentileValues, ...
        'markerSize', 16, ...
        'markerFaceAlpha', 0.3, ...
        'markerLineWidth', 1.0, ...
        'markerEdgeAlpha', 0.3, ...
        'onlyDepictLeeShapleyData', onlyDepictLeeShapleyData, ...
        'superimposeLeeShapleyData', superimposeLeeShapleyData, ...
        'superimposeLeeShapleyDataMarkerSize',  LeeShapleyDataMarkerSize);

    % L-center RGCs, physiological optics
    figNo = 3000 + 10;
    RGCMosaicAnalyzer.visualize.centerConeIsolatingVsAchromaticBPIscatterPlot(figNo, ...
        theAchromaticBPIs(LconeCenterIndices), ...
        theLconeIsolatingBPIs(LconeCenterIndices), ...
        theSurroundConePurities(LconeCenterIndices), ...
        cMosaic.LCONE_ID, ...
        '', ... % sprintf('LconeCenter%sBPIscatterPlot.pdf', theOpticsSubstring), ...
        '', ... % sprintf('LconeCenter%sBPIhistogramPlot.pdf', theOpticsSubstring), ...
        '', ... % sprintf('LconeCenter%sSurroundPurityPlot.pdf', theOpticsSubstring), ...
        '', ... %' sprintf('LconeCenter%sDensityPlot.pdf', theOpticsSubstring), ...
        sprintf('LconeCenter%sPercentilePlot.pdf', theOpticsSubstring), ...
        'maxVisualizedBPIDensity', maxVisualizedBPIDensity, ...
        'bpiInterval', BPIinterval, ...
        'minNumberOfCellsPerBPIintervalForPercentilePlot', minNumberOfCellsPerBPIintervalForPercentilePlot , ...
        'thePercentileValues', thePercentileValues, ...
        'markerSize', 16, ...
        'markerFaceAlpha', 0.3, ...
        'markerLineWidth', 1.0, ...
        'markerEdgeAlpha', 0.3, ...
        'onlyDepictLeeShapleyData', onlyDepictLeeShapleyData, ...
        'superimposeLeeShapleyData', superimposeLeeShapleyData, ...
        'superimposeLeeShapleyDataMarkerSize',  LeeShapleyDataMarkerSize);

    % M-center RGCs, physiological optics
    figNo = 3000 + 11;
    RGCMosaicAnalyzer.visualize.centerConeIsolatingVsAchromaticBPIscatterPlot(figNo, ...
        theAchromaticBPIs(MconeCenterIndices), ...
        theMconeIsolatingBPIs(MconeCenterIndices), ...
        theSurroundConePurities(MconeCenterIndices), ...
        cMosaic.MCONE_ID, ...
        '', ... % sprintf('MconeCenter%sBPIscatterPlot.pdf', theOpticsSubstring), ...
        '', ... % sprintf('MconeCenter%sBPIhistogramPlot.pdf', theOpticsSubstring), ...
        '', ... % sprintf('MconeCenter%sSurroundPurityPlot.pdf', theOpticsSubstring), ...
        '', ... %' sprintf('MconeCenter%sDensityPlot.pdf', theOpticsSubstring), ...
        sprintf('MconeCenter%sPercentilePlot.pdf', theOpticsSubstring), ...
        'maxVisualizedBPIDensity', maxVisualizedBPIDensity, ...
        'bpiInterval', BPIinterval, ...
        'minNumberOfCellsPerBPIintervalForPercentilePlot', minNumberOfCellsPerBPIintervalForPercentilePlot , ...
        'thePercentileValues', thePercentileValues, ...
        'markerSize', 16, ...
        'markerFaceAlpha', 0.3, ...
        'markerLineWidth', 1.0, ...
        'markerEdgeAlpha', 0.3, ...
        'onlyDepictLeeShapleyData', onlyDepictLeeShapleyData, ...
        'superimposeLeeShapleyData', superimposeLeeShapleyData, ...
        'superimposeLeeShapleyDataMarkerSize',  LeeShapleyDataMarkerSize);


end


function theBPI = bandPassIndex(theSpatialFrequencySupport, theSTF)

    [~, lowestSFindex] = min(theSpatialFrequencySupport(:));
    Ro = theSTF(lowestSFindex);
    [Rmax, indexOfMaxResponse] = max(theSTF(:));

    theBPI = Ro/Rmax;

    if (1==2)
        figure(9);
        plot(theSpatialFrequencySupport, theSTF, 'k-', 'LineWidth', 1.5);
        hold on;
        plot(theSpatialFrequencySupport(lowestSFindex), Ro, 'ro', 'MarkerSize', 16);
        plot(theSpatialFrequencySupport(indexOfMaxResponse), Rmax,  'bo', 'MarkerSize', 16);
        set(gca, 'XScale', 'log', 'XLim', [0.01 150]);
        title(sprintf('BPI = %2.3f', theBPI));
        drawnow;
        pause
    end
end
