function [theConeMosaicFrameSequenceResponses,theConeMosaicNullResponse] = inputConeMosaicResponseToStimulusFrameSequence(theMRGCMosaic, theOptics, ...
	theNullStimulusScene, theStimulusFrameSequence, ...
	stimulusXYposDegs, computeConeMosaicModulationResponse, varargin)

	% Parse input
    p = inputParser;
    p.addParameter('visualizeResponse', false, @islogical);
    p.addParameter('thePresentationDisplayForVisualizingOpticalSceneOrImage', [], @isstruct);
    p.addParameter('stimulusInfoString', '', @ischar);
    p.parse(varargin{:});
    visualizeResponse = p.Results.visualizeResponse;
    thePresentationDisplay = p.Results.thePresentationDisplayForVisualizingOpticalSceneOrImage;
    stimulusInfoString = p.Results.stimulusInfoString;

	% Compute the cone mosaic response to the null scene
    theConeMosaicNullResponse = theMRGCMosaic.inputConeMosaic.compute(...
    	oiCompute(theOptics, theNullStimulusScene), ...
    	'opticalImagePositionDegs', stimulusXYposDegs, ...
    	'nTrials', 1);

    % Compute the normalizing response
  	coneIndicesWithZeroNullResponse = find(theConeMosaicNullResponse == 0);
  	normalizingResponse = 1./theConeMosaicNullResponse;
  	normalizingResponse(coneIndicesWithZeroNullResponse) = 0;
  	normalizingResponse = reshape(normalizingResponse, [1 1 numel(normalizingResponse)]);

  	% Allocate memory for the cone mosaic response to the drifting grating frames
  	theConeMosaicFrameSequenceResponses = ...
  		zeros(numel(theStimulusFrameSequence), theMRGCMosaic.inputConeMosaic.conesNum, 'single');

  	if (visualizeResponse) && (~isempty(thePresentationDisplay))
  		theOpticalImageSequence = cell(1, numel(theStimulusFrameSequence));
  	end

  	% Compute mosaic responses to all frames
  	parfor iFrame = 1:numel(theStimulusFrameSequence)
  		theOI = oiCompute(theOptics, theStimulusFrameSequence{iFrame});

  		if (visualizeResponse) && (~isempty(thePresentationDisplay))
  			theOpticalImageSequence{iFrame} = theOI;
  		end

    	theConeMosaicFrameResponse = theMRGCMosaic.inputConeMosaic.compute(theOI, ...
      		'opticalImagePositionDegs', stimulusXYposDegs, ...
      		'nTrials', 1);
    	if (computeConeMosaicModulationResponse)
    		theConeMosaicFrameResponse = bsxfun(@times, ...
             		bsxfun(@minus, theConeMosaicFrameResponse, theConeMosaicNullResponse), ...
                	normalizingResponse);
    	end
    	theConeMosaicFrameSequenceResponses(iFrame,:) = single(theConeMosaicFrameResponse(1,1,:));
  	end % iFrame

  	if (visualizeResponse)
  		dx = -1:0.2:1;
  		domainVisualizationTicks = struct(...
          		'x', theMRGCMosaic.eccentricityDegs(1)+dx, ...
          		'y', theMRGCMosaic.eccentricityDegs(2)+dx);
  		domainVisualizationTicksForSceneOrOpticalImage = struct(...
          		'x', dx, ...
          		'y', dx);

  		domainVisualizationLimits(1:2) = ...
  			theMRGCMosaic.inputConeMosaic.eccentricityDegs(1) + ...
  			0.5*[-1 1] * theMRGCMosaic.inputConeMosaic.sizeDegs(1);
  		domainVisualizationLimits(3:4) = ...
  			theMRGCMosaic.inputConeMosaic.eccentricityDegs(2) + ...
  			0.5*[-1 1] * theMRGCMosaic.inputConeMosaic.sizeDegs(2);

  		domainVisualizationLimitsForSceneOrOpticalImage(1:2) = ...
  			domainVisualizationLimits(1:2) - theMRGCMosaic.inputConeMosaic.eccentricityDegs(1);
  		domainVisualizationLimitsForSceneOrOpticalImage(3:4) = ...
  			domainVisualizationLimits(3:4) - theMRGCMosaic.inputConeMosaic.eccentricityDegs(2);
  		
  		hFig = figure(111); clf
  		set(hFig,'Position', [10 10 1800 900], 'Color', [1 1 1]);
  		axMosaic = subplot(1,3,1);
  		axCmosaicResponse = subplot(1,3,2);
  		axSceneOrOpticalImage = subplot(1,3,3); 

  		theMRGCMosaic.visualize(...
  			'figureHandle', hFig, ...
	    	'axesHandle', axMosaic, ...
        	'identifyInputCones', false, ...
        	'identifyPooledCones', true, ...
        	'domainVisualizationLimits', domainVisualizationLimits, ...
        	'domainVisualizationTicks', domainVisualizationTicks);

  		if (computeConeMosaicModulationResponse)
  			activationRange = max(abs(theConeMosaicFrameSequenceResponses(:))) * [-1 1];
  			plotTitle = sprintf('%s (Response range: [%2.2f .. %2.2f])', stimulusInfoString, activationRange(1), activationRange(2));
  		else
  			activationRange = int([min(theConeMosaicFrameSequenceResponses(:)) max(theConeMosaicFrameSequenceResponses(:))]);
  			plotTitle = sprintf('%s (Response range: [%2.0f .. %2.0f])', stimulusInfoString, activationRange(1), activationRange(2));
  		end

  		for iFrame = 1:numel(theStimulusFrameSequence)
	  		theMRGCMosaic.inputConeMosaic.visualize(...
	  			'figureHandle', hFig, ...
	    		'axesHandle', axCmosaicResponse, ...
	    		'activation', reshape(theConeMosaicFrameSequenceResponses(iFrame,:), [1 1 size(theConeMosaicFrameSequenceResponses,2)]), ...
	    		'activationRange', activationRange, ...
	    		'domainVisualizationLimits', domainVisualizationLimits, ...
	        	'domainVisualizationTicks', domainVisualizationTicks, ...
	        	'plotTitle', plotTitle);
  			
  			if (~isempty(thePresentationDisplay))
  				showScene = false;
  				showOpticalImage = ~showScene;

  				if (showScene)
	  			RGCMosaicConstructor.visualize.sceneOrOpticalImage(theStimulusFrameSequence{iFrame}, ...
	    			thePresentationDisplay, axSceneOrOpticalImage, ...
	    			domainVisualizationLimitsForSceneOrOpticalImage, ...
	    			domainVisualizationTicksForSceneOrOpticalImage, ...
	    			'plotTitle', 'scene');
	  			end

	  			if (showOpticalImage)
	  			RGCMosaicConstructor.visualize.sceneOrOpticalImage(theOpticalImageSequence{iFrame}, ...
	    			thePresentationDisplay, axSceneOrOpticalImage, ...
	    			domainVisualizationLimitsForSceneOrOpticalImage, ...
	    			domainVisualizationTicksForSceneOrOpticalImage, ...
	    			'plotTitle', 'optical image');
	  			end
	  		end

  			drawnow;

  		end % iFrame
  	end

end