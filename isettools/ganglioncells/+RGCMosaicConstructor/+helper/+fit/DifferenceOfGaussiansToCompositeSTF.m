function [DoGparams, theFittedSTF] = DifferenceOfGaussiansToCompositeSTF(...
	spatialFrequencySupportCPD, theSTF, RcDegsInitialEstimate, ...
	targetVisualSTFparams, targetVisualSTFparamFractionalTolerances, ...
    multiStartsNum, deltaThresholdToDeclareLocalMinInSTF, ...
	axDoGFitToCompositeSTF)

    normFactor = max(theSTF(:));
    theSTF = theSTF / normFactor;

    % By setting the minPeakProminance to [], we search to find the global peak of the STF
    % If we set to some value, like 1e-2, we are looking for the first peaks in which there is a drop by at least that factor on either side
    minPeakProminance = [];
    
    [spatialFrequencySupportCPDtoFit, theSTFtoFit] = ...
    	RGCMosaicConstructor.helper.simulateExperiment.stfPortionToAnalyze(...
    		spatialFrequencySupportCPD, theSTF, ...
            deltaThresholdToDeclareLocalMinInSTF, minPeakProminance);

    % DoG param initial values and limits: intStoCsens ratio
    meanIntegratedSurroundToCenterSensitivity = RGCmodels.CronerKaplan.constants.surroundToCenterIntegratedSensitivityRatioFromEccDegsForPcells(10);
    intStoCsens = struct(...
        'low', targetVisualSTFparams.surroundToCenterIntegratedSensitivityRatio * (1-targetVisualSTFparamFractionalTolerances.surroundToCenterIntegratedSensitivityRatio), ...
        'high', targetVisualSTFparams.surroundToCenterIntegratedSensitivityRatio * (1+targetVisualSTFparamFractionalTolerances.surroundToCenterIntegratedSensitivityRatio), ...
        'initial', targetVisualSTFparams.surroundToCenterIntegratedSensitivityRatio);

    % DoG param initial values and limits: RsToRc ratio
    RsToRc = struct(...
        'low',  targetVisualSTFparams.surroundToCenterRcRatio * (1-targetVisualSTFparamFractionalTolerances.surroundToCenterRcRatio), ...
        'high', targetVisualSTFparams.surroundToCenterRcRatio * (1+targetVisualSTFparamFractionalTolerances.surroundToCenterRcRatio), ...
        'initial', RGCmodels.CronerKaplan.constants.surroundToCenterRcRatio);


    % DoG param initial values and limits: RcDegs
    RcDegs = struct(...
            'low', RcDegsInitialEstimate*targetVisualSTFparamFractionalTolerances.visualRcDegs, ...
            'high', RcDegsInitialEstimate/targetVisualSTFparamFractionalTolerances.visualRcDegs, ...
        'initial', RcDegsInitialEstimate);

    % DoG param initial values and limits: center gain, kc
    dcInitial = 1;
    initialKc = (dcInitial + 0.01 * (RsToRc.initial*RcDegs.initial)^2)/(RcDegs.initial^2);
    Kc = struct(...    
        'low', initialKc/1000, ...
        'high', initialKc*100, ...
        'initial', initialKc);

    
    %                          Kc           intStoCsens             RsToRc            RcDegs    
    DoGparams.initialValues = [Kc.initial   intStoCsens.initial    RsToRc.initial    RcDegs.initial];
    DoGparams.lowerBounds   = [Kc.low       intStoCsens.low        RsToRc.low        RcDegs.low];
    DoGparams.upperBounds   = [Kc.high      intStoCsens.high       RsToRc.high       RcDegs.high];
    DoGparams.names         = {'Kc',        'intStoCsens',         'RsToRc',         'RcDegs'};
    DoGparams.scaling       = {'log',       'linear',           'linear',         'linear'};
    
     % The DoG model in the frequency domain
     DoGSTF = @(params,spatialFrequency)(...
                    abs(params(1)       * ( pi * params(4)^2             * exp(-(pi*params(4)*spatialFrequency).^2) ) - ...
                    params(1)*params(2)/(params(3))^2 * ( pi * (params(4)*params(3))^2 * exp(-(pi*params(4)*params(3)*spatialFrequency).^2) )));
        
     % The optimization objective
     weights = 1 + 0./spatialFrequencySupportCPDtoFit;
     objective = @(p) sum((weights .* (DoGSTF(p, spatialFrequencySupportCPDtoFit) - theSTFtoFit)).^2);
        
     % Multi-start
     problem = createOptimProblem('fmincon',...
          'objective', objective, ...
          'x0', DoGparams.initialValues, ...
          'lb', DoGparams.lowerBounds, ...
          'ub', DoGparams.upperBounds, ...
          'options', optimoptions(...
		 	'fmincon',...
		    'Display', 'off', ...
		    'Algorithm', 'interior-point',... % 'sqp', ... % 'interior-point',...
		    'GradObj', 'off', ...
		    'DerivativeCheck', 'off', ...
		    'MaxFunEvals', 10^5, ...
		    'MaxIter', 10^3) ...
          );
      
     ms = MultiStart(...
          'Display', 'off', ...
          'StartPointsToRun','bounds-ineqs', ...  % run only initial points that are feasible with respect to bounds and inequality constraints.
          'UseParallel', true);
      
    % Run the multi-start
    DoGparams.finalValues = run(ms, problem, multiStartsNum);
    
    % Visualize the fitted model params and their range
    if (~isempty(axDoGFitToCompositeSTF))
    	RGCMosaicConstructor.visualize.fittedModelParams(axDoGFitToCompositeSTF, DoGparams, mfilename);
    end


    % Account for normalizationFactor
    DoGparams.finalValues(1) = DoGparams.finalValues(1) * normFactor;

    theFittedSTF.compositeSTF = DoGSTF(DoGparams.finalValues, spatialFrequencySupportCPDtoFit);
    theFittedSTF.centerSTF = DoGparams.finalValues(1) * ( pi * DoGparams.finalValues(4)^2 * exp(-(pi*DoGparams.finalValues(4)*spatialFrequencySupportCPDtoFit).^2) );
    theFittedSTF.surroundSTF = DoGparams.finalValues(1)*DoGparams.finalValues(2)/(DoGparams.finalValues(3))^2  * ( pi * (DoGparams.finalValues(4)*DoGparams.finalValues(3))^2 * exp(-(pi*DoGparams.finalValues(4)*DoGparams.finalValues(3)*spatialFrequencySupportCPDtoFit).^2) );


    %compositeSTFfullRange = DoGSTF(DoGparams.finalValues, spatialFrequencySupportCPD);

    theSTF = theSTF * normFactor;
    differentials = (theSTF(:) - theFittedSTF.compositeSTF(:))/normFactor;
    theRMSerror = sqrt(sum(differentials.^2)/numel(theSTFtoFit));

    theFittedSTF.RMSE = theRMSerror;

    %sfHiRes = logspace(log10(min([min(spatialFrequencySupportCPD) 0.1])), log10(100), 64);
    sfHiRes = logspace(log10(min(spatialFrequencySupportCPD)), log10(max(spatialFrequencySupportCPDtoFit)), 64);

    theFittedSTF.sfHiRes = sfHiRes;
    theFittedSTF.compositeSTFHiRes = DoGSTF(DoGparams.finalValues, sfHiRes);
    theFittedSTF.centerSTFHiRes = DoGparams.finalValues(1) * ( pi * DoGparams.finalValues(4)^2 * exp(-(pi*DoGparams.finalValues(4)*sfHiRes).^2) );
    theFittedSTF.surroundSTFHiRes = DoGparams.finalValues(1)*DoGparams.finalValues(2)/(DoGparams.finalValues(3))^2 * ( pi * (DoGparams.finalValues(4)*DoGparams.finalValues(3))^2 * exp(-(pi*DoGparams.finalValues(4)*DoGparams.finalValues(3)*sfHiRes).^2) );
end

