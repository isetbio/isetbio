function [theOptimalStrehlRatioOI, theOptimalStrehlRatioPSF, theOptimalStrehlRatioDefocusDiopters, theOptimalStrehlRatio] = optimizedStrehlRatioPSF(examinedRefractionErrorDiopters, ...
	theConeMosaic, oiPositionDegs, opticsParams, wavefrontSpatialSamples, psfUpsampleFactor, ...
	visualizeStrehlRatioOptimization, contrastOptimizedStrehlRatioPSFtoAsMeasuredAndCentralCorrection)

	% Generate diffraction-limited PSF so that we can compute the Strehl ratio later
	[oiEnsemble, psfEnsemble] = theConeMosaic.oiEnsembleGenerate(...
			oiPositionDegs, ...
	       'zernikeDataBase', opticsParams.ZernikeDataBase, ...
	       'subjectID', 0, ...
	       'pupilDiameterMM', opticsParams.pupilDiameterMM, ...
	       'refractiveErrorDiopters', 0.0, ...
	       'noLCA', false, ...
	       'zeroCenterPSF', opticsParams.zeroCenterPSF, ...
	       'subtractCentralRefraction', false, ...
	       'wavefrontSpatialSamples', wavefrontSpatialSamples, ...
	       'upsampleFactor', psfUpsampleFactor, ...
	       'warningInsteadOfErrorForBadZernikeCoeffs', false);

	% Find the wavelength at thich the diffraction-limited PSF achieves it peak.
	% Since we have LCA enabled, this should be 550.
	theDiffractionLimitedPSF = psfEnsemble{1,1};
	[peakDiffractionLimitedPSFAmplitude, ...
	 wavelengthIndexOfPeakDiffractionLimitedPSFamplitude, ...
	 wavelengthOfPeakDiffractionLimitedPSFamplitude] = RGCMosaicConstructor.helper.optics.analyzePSF(theDiffractionLimitedPSF, []);
	 assert(wavelengthOfPeakDiffractionLimitedPSFamplitude == 550, 'Diffraction-limited PSF does not peak at 550');

	targetInFocusWavelengthIndex = wavelengthIndexOfPeakDiffractionLimitedPSFamplitude;
	targetInFocusWavelength = wavelengthOfPeakDiffractionLimitedPSFamplitude;
	fprintf('Diffraction-limited PSF peaks at %d nm (which is our in-focus wavelength)\n', targetInFocusWavelength);

	if (visualizeStrehlRatioOptimization) || (contrastOptimizedStrehlRatioPSFtoAsMeasuredAndCentralCorrection)
		% Generate central-diffraction corrected PSF (just for reference to the optimal Strehl ratio PSF)
		[oiEnsemble, psfEnsemble] = theConeMosaic.oiEnsembleGenerate(...
        			oiPositionDegs, ...
			       'zernikeDataBase', opticsParams.ZernikeDataBase, ...
			       'subjectID', opticsParams.subjectID, ...
			       'pupilDiameterMM', opticsParams.pupilDiameterMM, ...
			       'refractiveErrorDiopters', 0.0, ...
			       'noLCA', opticsParams.noLCA, ...
			       'zeroCenterPSF', opticsParams.zeroCenterPSF, ...
			       'subtractCentralRefraction', true, ...
			       'wavefrontSpatialSamples', wavefrontSpatialSamples, ...
			       'upsampleFactor', psfUpsampleFactor, ...
			       'warningInsteadOfErrorForBadZernikeCoeffs', false);

		theCentralCorrectionPSF = psfEnsemble{1,1};
		[peakCentralCorrectionPSFAmplitude, ...
	 	wavelengthIndexOfPeakCentralCorrectionPSFamplitude, ...
	 	wavelengthOfPeakCentralCorrectionPSFamplitude] = RGCMosaicConstructor.helper.optics.analyzePSF(theCentralCorrectionPSF, []);
	end

	StrehlRatio = examinedRefractionErrorDiopters * 0;

	% Search through the defocus values in examinedRefractionErrorDiopters to determine the defocus value
	% for which the ratio of peak PSF amplitude for the current subject to peakDiffractionLimitedPSFAmplitude 
	% (at the wavelengthOfPeakDiffractionLimitedPSFamplitude) is maximal
	parfor iRefractiveError = 1:numel(examinedRefractionErrorDiopters)
		defocusValue = examinedRefractionErrorDiopters(iRefractiveError);
		% Generate optics with the examined defocus value
		[oiEnsemble, psfEnsemble] = theConeMosaic.oiEnsembleGenerate(...
        			oiPositionDegs, ...
			       'zernikeDataBase', opticsParams.ZernikeDataBase, ...
			       'subjectID', opticsParams.subjectID, ...
			       'pupilDiameterMM', opticsParams.pupilDiameterMM, ...
			       'refractiveErrorDiopters', defocusValue, ...
			       'noLCA', opticsParams.noLCA, ...
			       'zeroCenterPSF', opticsParams.zeroCenterPSF, ...
			       'subtractCentralRefraction', false, ...
			       'wavefrontSpatialSamples', wavefrontSpatialSamples, ...
			       'upsampleFactor', psfUpsampleFactor, ...
			       'warningInsteadOfErrorForBadZernikeCoeffs', false);
		theCurrentPSF = psfEnsemble{1,1};
		peakCurrentPSFAmplitude = RGCMosaicConstructor.helper.optics.analyzePSF(theCurrentPSF, targetInFocusWavelengthIndex);
		StrehlRatio(iRefractiveError) = peakCurrentPSFAmplitude/peakDiffractionLimitedPSFAmplitude;
    end % parfor for iRefractiveError
	

	% Find the refraction that maximized the Strehl ratio at the wavelength where the diffraction-limited PSF reaches its peak (550)
	[theOptimalStrehlRatio, iRefractiveError] = max(StrehlRatio);
	theOptimalStrehlRatioDefocusDiopters = examinedRefractionErrorDiopters(iRefractiveError);
    fprintf('\nWill employ a defocus value of %2.3fD, for which the Strehl ratio is maximed (%2.3f)\n\n', theOptimalStrehlRatioDefocusDiopters, theOptimalStrehlRatio);

	% Generate the optimal Strehl ratio optics
	[oiEnsemble, psfEnsemble] = theConeMosaic.oiEnsembleGenerate(...
		oiPositionDegs, ...
       'zernikeDataBase', opticsParams.ZernikeDataBase, ...
       'subjectID', opticsParams.subjectID, ...
       'pupilDiameterMM', opticsParams.pupilDiameterMM, ...
       'refractiveErrorDiopters', theOptimalStrehlRatioDefocusDiopters, ...
       'noLCA', opticsParams.noLCA, ...
       'zeroCenterPSF', opticsParams.zeroCenterPSF, ...
       'subtractCentralRefraction', false, ...
       'wavefrontSpatialSamples', wavefrontSpatialSamples, ...
       'upsampleFactor', psfUpsampleFactor, ...
       'warningInsteadOfErrorForBadZernikeCoeffs', false);

	% This is it.
	theOptimalStrehlRatioOI = oiEnsemble{1,1}; 
	theOptimalStrehlRatioPSF = psfEnsemble{1,1};
	
    contrastOptimizedStrehlRatioPSFtoAsMeasuredAndCentralCorrection = visualizeStrehlRatioOptimization;

	if (contrastOptimizedStrehlRatioPSFtoAsMeasuredAndCentralCorrection)
		[oiEnsemble, psfEnsemble] = theConeMosaic.oiEnsembleGenerate(...
        			oiPositionDegs, ...
			       'zernikeDataBase', opticsParams.ZernikeDataBase, ...
			       'subjectID', opticsParams.subjectID, ...
			       'pupilDiameterMM', opticsParams.pupilDiameterMM, ...
			       'refractiveErrorDiopters', 0.0, ...
			       'noLCA', opticsParams.noLCA, ...
			       'zeroCenterPSF', opticsParams.zeroCenterPSF, ...
			       'subtractCentralRefraction', false, ...
			       'wavefrontSpatialSamples', wavefrontSpatialSamples, ...
			       'upsampleFactor', psfUpsampleFactor, ...
			       'warningInsteadOfErrorForBadZernikeCoeffs', false);
		theOIasMeasured = oiEnsemble{1,1}; 
		thePSFasMeasured = psfEnsemble{1,1};
		

		hFig = figure(2000);
		clf;
		set(hFig, 'Position', [10 10 1360 1200]);

		XLimsArcMin = 5*[-1 1];
		YLimsArcMin = 5*[-1 1];
		XTicksArcMin = [-5:1:5];
		YTicksArcMin = [-5:1:5];
		
		colormap(brewermap(1024, '*greys'));

		% The diffraction-limited PSF at the target in-focus wavelength
		ax1 = subplot(2,3,1);
        ax2 = subplot(2,3,2);
        ax3 = subplot(2,3,4);
        ax4 = subplot(2,3,5);
        ax5 = subplot(2,3, [3 6]);

        plot(ax5,examinedRefractionErrorDiopters, StrehlRatio, 'ro-', 'MarkerSize', 12, 'MarkerFaceColor', [1 0.5 0.5]);
        hold(ax5, 'on');
        plot(ax5, theOptimalStrehlRatioDefocusDiopters, StrehlRatio(iRefractiveError), 'bs', 'MarkerSize', 20);
	    xlabel(ax5, 'defocus (D)');
        ylabel(ax5, sprintf('Strehl ratio at %d nm (in-focus wavelength)', targetInFocusWavelength));


		RGCMosaicConstructor.helper.optics.visualizePSFatWavelength(ax1, theDiffractionLimitedPSF, targetInFocusWavelengthIndex, ...
			peakDiffractionLimitedPSFAmplitude, ...
			sprintf('diffraction limited PSF\npeak: %d at \n%d nm (in-focus wavelength)', peakDiffractionLimitedPSFAmplitude, targetInFocusWavelength), ...
			'XLimsArcMin', XLimsArcMin, ...
			'YLimsArcMin', YLimsArcMin, ...
			'XTicksArcMin', XTicksArcMin, ... 
			'YTicksArcMin', YTicksArcMin);
		colormap(ax1, brewermap(1024, '*greys'));
		
		% The optimal Strehl ratio PSF at the target in-focus wavelength
		peakOptimalStrehlRatioPSFAmplitude = RGCMosaicConstructor.helper.optics.analyzePSF(theOptimalStrehlRatioPSF, targetInFocusWavelengthIndex);
		
        RGCMosaicConstructor.helper.optics.visualizePSFatWavelength(ax2, theOptimalStrehlRatioPSF, targetInFocusWavelengthIndex, ...
			peakOptimalStrehlRatioPSFAmplitude,  ...
			sprintf('(%2.1f,%2.1f) degs PSF \n with optimal Strehl ratio (%2.3f)\npeak: %f at \n%d nm (in-focus wavelength))', ...
				oiPositionDegs(1), oiPositionDegs(2), peakOptimalStrehlRatioPSFAmplitude/ peakDiffractionLimitedPSFAmplitude, peakOptimalStrehlRatioPSFAmplitude, targetInFocusWavelength), ...
			'XLimsArcMin', XLimsArcMin, ...
			'YLimsArcMin', YLimsArcMin, ...
			'XTicksArcMin', XTicksArcMin, ... 
			'YTicksArcMin', YTicksArcMin);
		colormap(ax2, brewermap(1024, '*greys'));

		% The PSF as measured
		[peakPSFasMeasuredAmplitude, wavelengthIndexOfPeakPSFasMeasuredAmplitude, ...
	    wavelengthOfPeakPSFasMeasuredAmplitude] = RGCMosaicConstructor.helper.optics.analyzePSF(thePSFasMeasured, []);
		
		RGCMosaicConstructor.helper.optics.visualizePSFatWavelength(ax3, thePSFasMeasured, wavelengthIndexOfPeakPSFasMeasuredAmplitude, ...
			peakPSFasMeasuredAmplitude, ...
			sprintf('(%2.1f,%2.1f) PSF as measured\npeak: %f \nat %d nm', oiPositionDegs(1), oiPositionDegs(2), peakPSFasMeasuredAmplitude, wavelengthOfPeakPSFasMeasuredAmplitude), ...
			'XLimsArcMin', XLimsArcMin, ...
			'YLimsArcMin', YLimsArcMin, ...
			'XTicksArcMin', XTicksArcMin, ... 
			'YTicksArcMin', YTicksArcMin);
		colormap(ax3, brewermap(1024, '*greys'));

		
		peakCentralCorrectionPSFAmplitude = RGCMosaicConstructor.helper.optics.analyzePSF(theCentralCorrectionPSF, targetInFocusWavelengthIndex);
		StrehlRatioForCentralCorrection = peakCentralCorrectionPSFAmplitude/peakDiffractionLimitedPSFAmplitude;

		RGCMosaicConstructor.helper.optics.visualizePSFatWavelength(ax4, theCentralCorrectionPSF, targetInFocusWavelengthIndex, ...
			peakCentralCorrectionPSFAmplitude, ...
			sprintf('(%2.1f,%2.1f) PSF \n(with central refraction (0,0) correction)\nStrehl ratio: %2.3f\npeak %f \nat %d nm',  oiPositionDegs(1), oiPositionDegs(2), StrehlRatioForCentralCorrection, peakCentralCorrectionPSFAmplitude, targetInFocusWavelength), ...
			'XLimsArcMin', XLimsArcMin, ...
			'YLimsArcMin', YLimsArcMin, ...
			'XTicksArcMin', XTicksArcMin, ... 
			'YTicksArcMin', YTicksArcMin);
		colormap(ax4, brewermap(1024, '*greys'));
		drawnow;	
	end

end
