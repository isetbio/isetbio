function [theOI, thePSF, theOptimalStrehlRatioDefocusDiopters, theOptimalStrehlRatio] = generate(...
	theConeMosaic, oiPositionDegs, opticsParams, varargin)

	% Parse input
    p = inputParser;
    % Optional params
    p.addParameter('visualizePSF', false, @islogical);
    p.addParameter('visualizedWavelengths', [], @(x)(isempty(x)||isnumeric(x)));
    p.addParameter('visualizeStrehlRatioOptimization', true, @islogical);
    p.addParameter('contrastMaxStrehlRatioPSFtoAsMeasuredAndCentralCorrection', false, @islogical);
    p.parse(varargin{:});
    visualizePSF = p.Results.visualizePSF;
    visualizeStrehlRatioOptimization = p.Results.visualizeStrehlRatioOptimization;
    visualizedWavelengths = p.Results.visualizedWavelengths;
    contrastMaxStrehlRatioPSFtoAsMeasuredAndCentralCorrection = p.Results.contrastMaxStrehlRatioPSFtoAsMeasuredAndCentralCorrection;

	% Compute ecc
	opticsEcc = sqrt(sum(oiPositionDegs.^2,2));

	fprintf('----> Generating optics for ecc (degs): %f %f\n', oiPositionDegs(1), oiPositionDegs(2));

	psfUpsampleFactor = 1.0;
	if (opticsEcc < 0.5) || (~isempty(strfind(opticsParams.modification, 'adaptiveOptics')))
		psfUpsampleFactor = 2.0;
    end

	wavefrontSpatialSamples = 301;
	if (opticsEcc > 10)
		wavefrontSpatialSamples = 501;
	else
		wavefrontSpatialSamples = 701;
	end

	theOptimalStrehlRatioDefocusDiopters = [];
	theOptimalStrehlRatio = [];
	switch (opticsParams.modification)
		case 'adaptiveOptics6MM'
			 [oiEnsemble, psfEnsemble] = theConeMosaic.oiEnsembleGenerate(...
        			oiPositionDegs, ...
			       'zernikeDataBase', opticsParams.ZernikeDataBase, ...
			       'subjectID', 0, ...
			       'pupilDiameterMM', 6.0, ...
			       'refractiveErrorDiopters', opticsParams.refractiveErrorDiopters, ...
			       'noLCA', true, ...
			       'zeroCenterPSF', opticsParams.zeroCenterPSF, ...
			       'subtractCentralRefraction', false, ...
			       'wavefrontSpatialSamples', wavefrontSpatialSamples, ...
			       'upsampleFactor', psfUpsampleFactor, ...
			       'warningInsteadOfErrorForBadZernikeCoeffs', false);
			 theOI = oiEnsemble{1,1}; thePSF = psfEnsemble{1,1};

		case 'adaptiveOptics6MMwithLCA'
			 [oiEnsemble, psfEnsemble] = theConeMosaic.oiEnsembleGenerate(...
        			oiPositionDegs, ...
			       'zernikeDataBase', opticsParams.ZernikeDataBase, ...
			       'subjectID', 0, ...
			       'pupilDiameterMM', 6.0, ...
			       'refractiveErrorDiopters', opticsParams.refractiveErrorDiopters, ...
			       'noLCA', false, ...
			       'zeroCenterPSF', opticsParams.zeroCenterPSF, ...
			       'subtractCentralRefraction', false, ...
			       'wavefrontSpatialSamples', wavefrontSpatialSamples, ...
			       'upsampleFactor', psfUpsampleFactor, ...
			       'warningInsteadOfErrorForBadZernikeCoeffs', false);
			 theOI = oiEnsemble{1,1}; thePSF = psfEnsemble{1,1};

		case 'diffractionLimited'
			 [oiEnsemble, psfEnsemble] = theConeMosaic.oiEnsembleGenerate(...
        			oiPositionDegs, ...
			       'zernikeDataBase', opticsParams.ZernikeDataBase, ...
			       'subjectID', 0, ...
			       'pupilDiameterMM', opticsParams.pupilDiameterMM, ...
			       'refractiveErrorDiopters', opticsParams.refractiveErrorDiopters, ...
			       'noLCA', opticsParams.noLCA, ...
			       'zeroCenterPSF', opticsParams.zeroCenterPSF, ...
			       'subtractCentralRefraction', false, ...
			       'wavefrontSpatialSamples', wavefrontSpatialSamples, ...
			       'upsampleFactor', psfUpsampleFactor, ...
			       'warningInsteadOfErrorForBadZernikeCoeffs', false);
			 theOI = oiEnsemble{1,1}; thePSF = psfEnsemble{1,1};

		case 'centralRefractionCorrected'
			[oiEnsemble, psfEnsemble] = theConeMosaic.oiEnsembleGenerate(...
        			oiPositionDegs, ...
			       'zernikeDataBase', opticsParams.ZernikeDataBase, ...
			       'subjectID', opticsParams.subjectID, ...
			       'pupilDiameterMM', opticsParams.pupilDiameterMM, ...
			       'refractiveErrorDiopters', opticsParams.refractiveErrorDiopters, ...
			       'noLCA', opticsParams.noLCA, ...
			       'zeroCenterPSF', opticsParams.zeroCenterPSF, ...
			       'subtractCentralRefraction', true, ...
			       'wavefrontSpatialSamples', wavefrontSpatialSamples, ...
			       'upsampleFactor', psfUpsampleFactor, ...
			       'warningInsteadOfErrorForBadZernikeCoeffs', false);
			theOI = oiEnsemble{1,1}; thePSF = psfEnsemble{1,1};

		case 'customRefraction'
			fprintf('generating optics with custom refraction: %2.2fD\n', opticsParams.refractiveErrorDiopters);
			[oiEnsemble, psfEnsemble] = theConeMosaic.oiEnsembleGenerate(...
        			oiPositionDegs, ...
			       'zernikeDataBase', opticsParams.ZernikeDataBase, ...
			       'subjectID', opticsParams.subjectID, ...
			       'pupilDiameterMM', opticsParams.pupilDiameterMM, ...
			       'refractiveErrorDiopters', opticsParams.refractiveErrorDiopters, ...
			       'noLCA', opticsParams.noLCA, ...
			       'zeroCenterPSF', opticsParams.zeroCenterPSF, ...
			       'subtractCentralRefraction', false, ...
			       'wavefrontSpatialSamples', wavefrontSpatialSamples, ...
			       'upsampleFactor', psfUpsampleFactor, ...
			       'warningInsteadOfErrorForBadZernikeCoeffs', false);
			theOI = oiEnsemble{1,1}; thePSF = psfEnsemble{1,1};

        case 'nativeOpticsNoStrehlRatioOptimization'
            examinedRefractionErrorDiopters = 0.0;
            [theOI, thePSF, theOptimalStrehlRatioDefocusDiopters, theOptimalStrehlRatio] = RGCMosaicConstructor.helper.optics.optimizedStrehlRatioPSF(examinedRefractionErrorDiopters, ...
				theConeMosaic, oiPositionDegs, opticsParams, wavefrontSpatialSamples, psfUpsampleFactor, ...
				visualizeStrehlRatioOptimization, contrastMaxStrehlRatioPSFtoAsMeasuredAndCentralCorrection);

		case 'maxStrehlRatio'
			examinedRefractionErrorDiopters = -6:0.25:1;
			[theOI, thePSF, theOptimalStrehlRatioDefocusDiopters, theOptimalStrehlRatio] = RGCMosaicConstructor.helper.optics.optimizedStrehlRatioPSF(examinedRefractionErrorDiopters, ...
				theConeMosaic, oiPositionDegs, opticsParams, wavefrontSpatialSamples, psfUpsampleFactor, ...
				visualizeStrehlRatioOptimization, contrastMaxStrehlRatioPSFtoAsMeasuredAndCentralCorrection);

		otherwise
			error('Unknown optics modification: ''%s''.', opticsParams.modification);
	end % switch (opticsParams.modification)

	if (visualizePSF)
	 	[peakDiffractionLimitedPSFAmplitude, ...
	 	wavelengthIndexOfPeakAmplitude, ...
	 	wavelengthOfPeakAmplitude] = RGCMosaicConstructor.helper.optics.analyzePSF(thePSF, []);

	 	hFig = figure(333);
	 	set(hFig, 'Position', [10 10 1200 500]);
	 	if (isempty(visualizedWavelengths))
	 		ax = subplot(1,1,1);
	 		RGCMosaicConstructor.helper.optics.visualizePSFatWavelength(ax, thePSF, wavelengthIndexOfPeakAmplitude, ...
				max(thePSF.data(:)), sprintf('%2.0f nm', wavelengthOfPeakAmplitude));
	 	else
	 		for i = 1:numel(visualizedWavelengths)
	 			ax = subplot(2, round(0.5*numel(visualizedWavelengths)) , i);
	 			[~,wavelengthIndex] = min(abs(thePSF.supportWavelength-visualizedWavelengths(i)));
				RGCMosaicConstructor.helper.optics.visualizePSFatWavelength(ax, thePSF, wavelengthIndex, ...
					max(thePSF.data(:)), sprintf('%2.0f nm', thePSF.supportWavelength(wavelengthIndex)));
				drawnow;
	 		end
	 	end
		colormap(brewermap(1024, '*greys'));
	end
end