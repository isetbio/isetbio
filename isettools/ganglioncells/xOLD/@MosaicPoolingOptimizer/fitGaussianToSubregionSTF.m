function [Gparams, theFittedSTF] = fitGaussianToSubregionSTF(...
    spatialFrequencySupportCPD, theSTF, ...
    RcDegsInitialEstimate, rangeForRc, multiStartsNum)

    normFactor = max(theSTF(:));
    theSTF = theSTF / normFactor;

    % DoG param initial values and limits: center gain, kc
    Kc = struct(...    
        'low', 0.1, ...
        'high', 1e4, ...
        'initial', 1);

    % DoG param initial values and limits: RcDegs
    if (~isempty(rangeForRc))
            RcDegs = struct(...
                'low', rangeForRc(1), ...
                'high', rangeForRc(3), ...
            'initial', rangeForRc(2));
    else
            RcDegs = struct(...
                'low', RcDegsInitialEstimate/sqrt(2.0), ...
                'high', RcDegsInitialEstimate*200, ...
            'initial', RcDegsInitialEstimate*5);
    end

     %                          Kc           RcDegs    
     Gparams.initialValues = [Kc.initial   RcDegs.initial];
     Gparams.lowerBounds   = [Kc.low       RcDegs.low];
     Gparams.upperBounds   = [Kc.high      RcDegs.high];
     Gparams.names         = {'Kc',        'RcDegs'};
     Gparams.scaling       = {'log',       'linear'};
     
     % The Gaussian STF model in the frequency domain
     GaussianSTF = @(params,spatialFrequencySupportCPD)(...
                    params(1) *  pi * params(2)^2 * exp(-(pi*params(2)*spatialFrequencySupportCPD).^2));
        
     % The optimization objective
     objective = @(p) sum((GaussianSTF(p, spatialFrequencySupportCPD) - theSTF).^2);

     % Ready to fit
     options = optimset(...
            'Display', 'off', ...
            'Algorithm', 'interior-point',... % 'sqp', ... % 'interior-point',...
            'GradObj', 'off', ...
            'DerivativeCheck', 'off', ...
            'MaxFunEvals', 10^5, ...
            'MaxIter', 10^3);
        
     % Multi-start
     problem = createOptimProblem('fmincon',...
          'objective', objective, ...
          'x0', Gparams.initialValues, ...
          'lb', Gparams.lowerBounds, ...
          'ub', Gparams.upperBounds, ...
          'options', options...
          );
      
     ms = MultiStart(...
          'Display', 'off', ...
          'StartPointsToRun','bounds-ineqs', ...  % run only initial points that are feasible with respect to bounds and inequality constraints.
          'UseParallel', true);
      
     % Run the multi-start
     Gparams.finalValues = run(ms, problem, multiStartsNum);

     theFittedSTF.subregionSTF = normFactor * GaussianSTF(Gparams.finalValues, spatialFrequencySupportCPD);
     sfHiRes = logspace(log10(0.1), log10(100), 64);
     theFittedSTF.sfHiRes = sfHiRes;
     theFittedSTF.subregionSTFHiRes = normFactor * GaussianSTF(Gparams.finalValues, sfHiRes);

end