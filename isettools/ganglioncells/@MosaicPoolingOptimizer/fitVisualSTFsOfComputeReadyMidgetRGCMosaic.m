function fitVisualSTFsOfComputeReadyMidgetRGCMosaic(...
    computeReadyMosaicFilename, mRGCMosaicSTFresponsesFilename)

    % Load the compute-ready MRGC mosaic
    load(computeReadyMosaicFilename, 'theComputeReadyMRGCmosaic');

    % Load the computed mRGC  STF responses 
    load(mRGCMosaicSTFresponsesFilename, ...
        'visualRcDegsEstimates', ...
        'theMRGCMosaicSTFresponses', ...
        'theMRGCresponseTemporalSupportSeconds', ...
        'orientationsTested', 'spatialFrequenciesTested', ...
        'spatialPhasesDegs', 'coneContrasts');

    multiStartsNumDoGFit = 64;
    theMRGCMosaicOptimalSTFs = cell(1,theComputeReadyMRGCmosaic.rgcsNum);

    parfor iRGC = 1:theComputeReadyMRGCmosaic.rgcsNum

        theVisualSTF = MosaicPoolingOptimizer.optimalSTFfromResponsesToAllOrientationsAndSpatialFrequencies( ...
               orientationsTested, spatialFrequenciesTested, ...
               squeeze(theMRGCMosaicSTFresponses(:,:,:,iRGC)));

        [theFittedDoGModelParams, theFittedDoGModelToTheVisualSTF] = MosaicPoolingOptimizer.fitDifferenceOfGaussiansToSTF(...
                      spatialFrequenciesTested, ...
                      theVisualSTF, ...
                      visualRcDegsEstimates(iRGC), ...
                      visualRcDegsEstimates(iRGC)*[0.2 1 5], ...
                      multiStartsNumDoGFit);

        theMRGCMosaicOptimalSTFs{iRGC} = struct(...
            'measured', theVisualSTF, ...
            'DoGfit', theFittedDoGModelToTheVisualSTF, ...
            'DoGfitParams', theFittedDoGModelParams);
    end

    % Append theMRGCMosaicSTFs structs which contain the optimal STFs and
    % their DoG model fits and parameters for all midget RGCs
    save(mRGCMosaicSTFresponsesFilename, ...
        'theMRGCMosaicOptimalSTFs', '-append');

    fprintf('The optimal MRGC mosaic STFs and their DoG model fits and parameters were appended to %s. \n', mRGCMosaicSTFresponsesFilename);
end

