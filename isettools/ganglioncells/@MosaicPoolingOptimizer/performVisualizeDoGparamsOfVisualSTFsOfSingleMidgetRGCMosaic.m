function performVisualizeDoGparamsOfVisualSTFsOfSingleMidgetRGCMosaic(mosaicParams)

   employTemporalEquivalentEccentricity = true;

   % Ask the user which optics were used for computing the input cone
   % mosaic STF responses, so we can obtain the corresponding coneMosaicSTFresponsesFileName
   opticsParams = MosaicPoolingOptimizer.chooseOpticsForInputConeMosaicSTFresponses(mosaicParams);

   % Ask the user which H1 cell index to use for optimizing the RF
   % surround pooling model
   retinalRFmodelParams = MosaicPoolingOptimizer.chooseRFmodelForSurroundConePoolingOptimization(mosaicParams, opticsParams);

   % Generate the filename of the compute-ready mRGCMosaic to generate
   [computeReadyMosaicFileName, computeReadyMosaicResourcesDirectory] = MosaicPoolingOptimizer.resourceFileNameAndPath('computeReadyMosaic', ...
                'mosaicParams', mosaicParams, ...
                'opticsParams', opticsParams, ...
                'retinalRFmodelParams', retinalRFmodelParams);

   % Generate filename for the computed mRGCMosaicSTF responses
   [mRGCMosaicSTFresponsesFileName, resourcesDirectory] = ...
        MosaicPoolingOptimizer.resourceFileNameAndPath('mRGCMosaicSTFresponses', ...
            'mosaicParams', mosaicParams, ...
            'opticsParams', opticsParams);
    
   theMosaicFileNames = {...
            fullfile(computeReadyMosaicResourcesDirectory, computeReadyMosaicFileName) ...
            };

   theMRGCSTFResponsesFileNames = { ...
            fullfile(resourcesDirectory, mRGCMosaicSTFresponsesFileName) ...
            };

   [~, ~, pdfsDirectory] = MosaicPoolingOptimizer.resourceFileNameAndPath('pdfsDirectory', ...
        'mosaicParams', mosaicParams);

   MosaicPoolingOptimizer.visualizeFittedSTFsOfComputeReadyMidgetRGCMosaic(...
            theMosaicFileNames, ...
            theMRGCSTFResponsesFileNames, ...
            pdfsDirectory, ...
            employTemporalEquivalentEccentricity);

end
