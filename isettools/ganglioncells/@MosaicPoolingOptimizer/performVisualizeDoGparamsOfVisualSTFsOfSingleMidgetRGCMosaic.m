function performVisualizeDoGparamsOfVisualSTFsOfSingleMidgetRGCMosaic(mosaicParams)

    employTemporalEquivalentEccentricity = true;
    
    % Ask the user what optics were used for computing the compute-ready MRGC mosaic
    fprintf('\n---> Select the optics that were used to compute the compute-ready mosaic\n');
    opticsParamsForComputeReadyMosaic = ...
        MosaicPoolingOptimizer.chooseOpticsForInputConeMosaicSTFresponses(mosaicParams);
    
    % Ask the user which H1 cell index to use for optimizing the RF
    % surround pooling model
    retinalRFmodelParams = MosaicPoolingOptimizer.chooseRFmodelForSurroundConePoolingOptimization(...
        mosaicParams, opticsParamsForComputeReadyMosaic);
    
    % Generate the filename of the compute-ready mRGCMosaic to use
    [computeReadyMosaicFileName, computeReadyMosaicResourcesDirectory] = ...
       MosaicPoolingOptimizer.resourceFileNameAndPath('computeReadyMosaic', ...
                'mosaicParams', mosaicParams, ...
                'opticsParams', opticsParamsForComputeReadyMosaic, ...
                'retinalRFmodelParams', retinalRFmodelParams);


    % Now, ask the user what optics were used for computing the input cone
    % mosaic STF responses, so we can obtain the corresponding coneMosaicSTFresponsesFileName
    fprintf('\n---> Select the optics that were used to compute the input cone mosaic STF responses on which the mRGC mosaic STF responses were based on\n');
        opticsParamsForMRGCSTFs = MosaicPoolingOptimizer.chooseOpticsForInputConeMosaicSTFresponses(mosaicParams);
    
    % Generate filename for the computed mRGCMosaicSTF responses
    [mRGCMosaicSTFresponsesFileName, resourcesDirectory] = ...
    MosaicPoolingOptimizer.resourceFileNameAndPath('mRGCMosaicSTFresponses', ...
        'mosaicParams', mosaicParams, ...
        'opticsParams', opticsParamsForMRGCSTFs);
    
    fprintf('\n---> Select the chromaticity that was used to compute the input cone mosaic STF responses on which the mRGC mosaic STF responses were based on\n');
    % Ask the user what stimulus chromaticity to use
    [~, mRGCMosaicSTFresponsesFileName] = ...
    MosaicPoolingOptimizer.chooseStimulusChromaticityForMosaicResponsesAndUpdateFileName(...
        mRGCMosaicSTFresponsesFileName, 'STFresponses');

    
    theMosaicFileNames = {...
            fullfile(computeReadyMosaicResourcesDirectory, computeReadyMosaicFileName) ...
            };
    
    theMRGCSTFResponsesFileNames = { ...
            fullfile(resourcesDirectory, mRGCMosaicSTFresponsesFileName) ...
            };
    
    [~, ~, pdfsDirectory] = MosaicPoolingOptimizer.resourceFileNameAndPath('pdfsDirectory', ...
        'mosaicParams', mosaicParams);
    
    inspectDoGFits = input('Inspect DoG fits ? [Y/N] : ', 's');
    if (strcmp(lower(inspectDoGFits), 'y'))
        MosaicPoolingOptimizer.inspectDoGmodelFitsToMeasuredSTFs(...
            fullfile(computeReadyMosaicResourcesDirectory, computeReadyMosaicFileName), ...
            fullfile(resourcesDirectory, mRGCMosaicSTFresponsesFileName));

    end

    showZscoresInsteadOfData = false;
    MosaicPoolingOptimizer.visualizeFittedSTFsOfComputeReadyMidgetRGCMosaic(...
            theMosaicFileNames, ...
            theMRGCSTFResponsesFileNames, ...
            pdfsDirectory, ...
            showZscoresInsteadOfData, ...
            employTemporalEquivalentEccentricity);

end
