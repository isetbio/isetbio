function visualizeMultiSpectralMultiFocalRFgeneration(figNo, ...
    inputConeMosaic, theCurrentRGCindex, theCurrentRGCposition, ...
    coneType, ...
    coneIndicesAndWeightsForTriangulatingModels, ...
    triangulatingModelRGCpositions, ...
    triangulatingModelRGCIndices, triangulatingModelWeights, ...
    centerConeIndicesForCurrentRGC, centerConeWeightsForCurrentRGC, ...
    surroundConeIndicesForCurrentRGC, surroundConeWeightsForCurrentRGC)

    % 4 (rows) x 4 columns figure layout
    % First row: generated RF properties
    % Rows 2,3 and 4: the 3 spatially interpolated models
    % Layout for each row:
    % columns: (1) center RF map(2D), (2) surround RF map(2D), (3) center LWF (4) surround LWF

    
    hFig = figure(figNo); 
    ff = MSreadyPlot.figureFormat('4x8');

    if (coneType == cMosaic.LCONE_ID)
        clf;
        figName = sprintf('multifocal interpolation (RGC %d)', theCurrentRGCindex);
        coneString = 'L-cone';
        xOffset = 10;
        yOffset = 10;
        xSubplotOffset = 0;
        noYTicks = false;
        set(hFig, ...
            'Name', figName, ...
            'Position', [xOffset yOffset ff.figureSize(1) ff.figureSize(2)], ...
            'Color', [1 1 1]);
        drawnow;

    else
        coneString = 'M-cone';
        xSubplotOffset = 4;
        noYTicks = true;
    end

    

    tickSeparationArcMin = 3;
    spatialSupportRangeArcMin = tickSeparationArcMin*6;


    ax = subplot('Position', ff.subplotPosVectors(4,3).v);
    centerLineWeightingFunctions = mRGCMosaic.renderSubregionConePoolingPlot(ax, ...
            inputConeMosaic, ...
            theCurrentRGCposition, ...
            centerConeIndicesForCurrentRGC, ...
            centerConeWeightsForCurrentRGC, ...
            'withFigureFormat', ff, ...
            'spatialSupportRangeArcMin', spatialSupportRangeArcMin, ...
            'tickSeparationArcMin', tickSeparationArcMin, ...
            'plotTitle', sprintf('generated RF center'));

    ax = subplot('Position', ff.subplotPosVectors(4,4).v);
    surroundLineWeightingFunctions = mRGCMosaic.renderSubregionConePoolingPlot(ax, ...
            inputConeMosaic, ...
            theCurrentRGCposition, ...
            surroundConeIndicesForCurrentRGC, ...
            surroundConeWeightsForCurrentRGC, ...
            'withFigureFormat', ff, ...
            'spatialSupportRangeArcMin', spatialSupportRangeArcMin, ...
            'tickSeparationArcMin', tickSeparationArcMin, ...
            'plotTitle', sprintf('generated RF surround'), ...
            'noYLabel', true, ...
            'noYTicks', true);


    % Add the line weighting functions
    sensitivityRange(2) =  1.0*max([max(centerLineWeightingFunctions.x.amplitude(:)) max(centerLineWeightingFunctions.y.amplitude(:))]);
    sensitivityRange(1) = -0.8*sensitivityRange(2);
    
    centerLineWeightingFunctions.x.amplitude = centerLineWeightingFunctions.x.amplitude / max(sensitivityRange);
    centerLineWeightingFunctions.y.amplitude = centerLineWeightingFunctions.y.amplitude / max(sensitivityRange);
    surroundLineWeightingFunctions.x.amplitude = surroundLineWeightingFunctions.x.amplitude / max(sensitivityRange);
    surroundLineWeightingFunctions.y.amplitude = surroundLineWeightingFunctions.y.amplitude / max(sensitivityRange);
    sensitivityRange = sensitivityRange / max(sensitivityRange);

    ax = subplot('Position', ff.subplotPosVectors(4,5).v);
    mRGCMosaic.renderSubregionConePoolingLineWeightingFunctions(ax, ...
            centerLineWeightingFunctions.x, surroundLineWeightingFunctions.x, ...
            sensitivityRange, 'x', ...
            'withFigureFormat', ff, ...
            'spatialSupportRangeArcMin', spatialSupportRangeArcMin, ...
            'tickSeparationArcMin', tickSeparationArcMin, ...
            'plotTitle', 'line weighting functions, X', ...
            'noYTicks', true);

    ax = subplot('Position', ff.subplotPosVectors(4,6).v);
    mRGCMosaic.renderSubregionConePoolingLineWeightingFunctions(ax, ...
            centerLineWeightingFunctions.y, surroundLineWeightingFunctions.y, ...
            sensitivityRange, 'y', ...
            'withFigureFormat', ff, ...
            'spatialSupportRangeArcMin', spatialSupportRangeArcMin, ...
            'tickSeparationArcMin', tickSeparationArcMin, ...
            'plotTitle', 'line weighting functions, Y', ...
            'noYLabel', true, ...
            'noYTicks', true);


    drawnow;

    for iModel = 1:numel(triangulatingModelRGCIndices)
        centerConeWeights = coneIndicesAndWeightsForTriangulatingModels{iModel}.centerConeWeights;
        centerConeIndices = coneIndicesAndWeightsForTriangulatingModels{iModel}.centerConeIndices;
        surroundConeWeights = coneIndicesAndWeightsForTriangulatingModels{iModel}.surroundConeWeights;
        surroundConeIndices = coneIndicesAndWeightsForTriangulatingModels{iModel}.surroundConeIndices;
        
        noXLabel = true;
        noXTicks = true;

        if (triangulatingModelWeights(iModel) == 0)
            ax = subplot('Position', ff.subplotPosVectors(iModel,1+xSubplotOffset).v);
            axis(ax, 'square');
            set(ax, 'XTickLabel', {}, 'YTickLabel', {}, 'XColor', 'none', 'YColor', 'none');
            
    
            ax = subplot('Position', ff.subplotPosVectors(iModel,2+xSubplotOffset).v);
            axis(ax, 'square')
            set(ax, 'XTickLabel', {}, 'YTickLabel', {}, 'XColor', 'none', 'YColor', 'none');
           
            

            ax = subplot('Position', ff.subplotPosVectors(iModel,3+xSubplotOffset).v);
            axis(ax, 'square')
            set(ax, 'XTickLabel', {}, 'YTickLabel', {}, 'XColor', 'none', 'YColor', 'none');
           

            ax = subplot('Position', ff.subplotPosVectors(iModel,4+xSubplotOffset).v);
            axis(ax, 'square')
            set(ax, 'XTickLabel', {}, 'YTickLabel', {}, 'XColor', 'none', 'YColor', 'none');
            

            drawnow

        else
            ax = subplot('Position', ff.subplotPosVectors(iModel,1+xSubplotOffset).v);
            centerLineWeightingFunctions = mRGCMosaic.renderSubregionConePoolingPlot(ax, ...
                inputConeMosaic, ...
                theCurrentRGCposition, ...
                centerConeIndices, ...
                centerConeWeights, ...
                'withFigureFormat', ff, ...
                'spatialSupportRangeArcMin', spatialSupportRangeArcMin, ...
                'tickSeparationArcMin', tickSeparationArcMin, ...
                'plotTitle', sprintf('%s model from (%2.2f, %2.2f)\n evaluated at (%2.2f, %2.2f)', ...
                                     coneString, triangulatingModelRGCpositions(iModel,1), triangulatingModelRGCpositions(iModel,2), ...
                                     theCurrentRGCposition(1), theCurrentRGCposition(2)), ...
                'noXLabel', noXLabel, ...
                'noXTicks', noXTicks, ...
                'noYTicks', noYTicks);
    
            drawnow
            ax = subplot('Position', ff.subplotPosVectors(iModel,2+xSubplotOffset).v);
            surroundLineWeightingFunctions = mRGCMosaic.renderSubregionConePoolingPlot(ax, ...
                inputConeMosaic, ...
                theCurrentRGCposition, ...
                surroundConeIndices, ...
                surroundConeWeights, ...
                'withFigureFormat', ff, ...
                'spatialSupportRangeArcMin', spatialSupportRangeArcMin, ...
                'tickSeparationArcMin', tickSeparationArcMin, ...
                'plotTitle', sprintf('based on RGC #%d\nwith weight:%2.2f', ...
                    triangulatingModelRGCIndices(iModel), triangulatingModelWeights(iModel)), ...
                'noYLabel', true, ...
                'noXLabel', noXLabel, ...
                'noXTicks', noXTicks, ...
                'noYTicks', true);
    
                % Add the line weighting functions
                sensitivityRange(2) =  1.0*max([max(centerLineWeightingFunctions.x.amplitude(:)) max(centerLineWeightingFunctions.y.amplitude(:))]);
                sensitivityRange(1) = -0.8*sensitivityRange(2);
            
                centerLineWeightingFunctions.x.amplitude = centerLineWeightingFunctions.x.amplitude / max(sensitivityRange);
                centerLineWeightingFunctions.y.amplitude = centerLineWeightingFunctions.y.amplitude / max(sensitivityRange);
                surroundLineWeightingFunctions.x.amplitude = surroundLineWeightingFunctions.x.amplitude / max(sensitivityRange);
                surroundLineWeightingFunctions.y.amplitude = surroundLineWeightingFunctions.y.amplitude / max(sensitivityRange);
                sensitivityRange = sensitivityRange / max(sensitivityRange);
            drawnow

            ax = subplot('Position', ff.subplotPosVectors(iModel,3+xSubplotOffset).v);
            mRGCMosaic.renderSubregionConePoolingLineWeightingFunctions(ax, ...
                centerLineWeightingFunctions.x, surroundLineWeightingFunctions.x, ...
                sensitivityRange, 'x', ...
                'withFigureFormat', ff, ...
                'spatialSupportRangeArcMin', spatialSupportRangeArcMin, ...
                'tickSeparationArcMin', tickSeparationArcMin, ...
                'plotTitle', 'line weighting functions, X', ...
                'noXLabel', noXLabel, ...
                'noXTicks', noXTicks, ...
                'noYTicks', true);
            drawnow

            ax = subplot('Position', ff.subplotPosVectors(iModel,4+xSubplotOffset).v);
            mRGCMosaic.renderSubregionConePoolingLineWeightingFunctions(ax, ...
                centerLineWeightingFunctions.y, surroundLineWeightingFunctions.y, ...
                sensitivityRange, 'y', ...
                'withFigureFormat', ff, ...
                'spatialSupportRangeArcMin', spatialSupportRangeArcMin, ...
                'tickSeparationArcMin', tickSeparationArcMin, ...
                'plotTitle', 'line weighting functions, Y', ...
                'noYLabel', true, ...
                'noXLabel', noXLabel, ...
                'noXTicks', noXTicks, ...
                'noYTicks', true);
            drawnow
        end


    end % iModel

end

