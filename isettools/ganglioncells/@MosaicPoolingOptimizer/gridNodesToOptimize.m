function arbitraryNodesToCompute = gridNodesToOptimize()
    arbitraryNodesToCompute = {};

    s = input('Compute all nodes (1) or speficic ones (2):');
    if (s == 1)
        return;
    else

        % Bad nodes
        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 2, ...
                'coneType', [cMosaic.LCONE_ID cMosaic.MCONE_ID]);

        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 18, ...
                'coneType', [cMosaic.MCONE_ID]);

        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 15, ...
                'coneType', [cMosaic.MCONE_ID]);

        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 6, ...
                'coneType', [cMosaic.MCONE_ID]);

        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 31, ...
                'coneType', [cMosaic.LCONE_ID]);

        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 30, ...
                'coneType', [cMosaic.MCONE_ID]);

        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 29, ...
                'coneType', [cMosaic.LCONE_ID]);

        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 28, ...
                'coneType', [cMosaic.LCONE_ID]);

        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 26, ...
                'coneType', [cMosaic.LCONE_ID]);

        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 24, ...
                'coneType', [cMosaic.MCONE_ID]);

        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 20, ...
                'coneType', [cMosaic.LCONE_ID]);

        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 14, ...
                'coneType', [cMosaic.MCONE_ID]);

        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 13, ...
                'coneType', [cMosaic.MCONE_ID]);

        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 11, ...
                'coneType', [cMosaic.LCONE_ID]);

        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 9, ...
                'coneType', [cMosaic.LCONE_ID]);

        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 8, ...
                'coneType', [cMosaic.LCONE_ID]);

        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 7, ...
                'coneType', [cMosaic.LCONE_ID cMosaic.MCONE_ID]);

        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 5, ...
                'coneType', [cMosaic.LCONE_ID]);

        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 3, ...
                'coneType', [cMosaic.LCONE_ID]);

        arbitraryNodesToCompute{numel(arbitraryNodesToCompute)+1} = struct(...
                'number', 1, ...
                'coneType', [cMosaic.MCONE_ID]);

    end
end