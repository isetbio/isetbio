function performVisualizeDoGparamsOfVisualSTFsOfMultipleMidgetRGCMosaic(mosaicEccsToInclude)

   employTemporalEquivalentEccentricity = true;
   
   theMosaicFileNames = cell(1, numel(mosaicEccsToInclude));
   theMRGCSTFResponsesFileNames = cell(1, numel(mosaicEccsToInclude));

   % Generate all filenames for all included mosaics
   for iMosaic = 1:numel(mosaicEccsToInclude)
       mosaicParams = MosaicPoolingOptimizer.getMosaicParams(mosaicEccsToInclude(iMosaic));

       % Ask the user what optics were used for computing the compute-ready MRGC mosaic
        fprintf('\n---> Select the optics that were used to compute the compute-ready mosaic\n');
        opticsParamsForComputeReadyMosaic = ...
            MosaicPoolingOptimizer.chooseOpticsForInputConeMosaicSTFresponses(mosaicParams);
    
        % Ask the user which H1 cell index to use for optimizing the RF
        % surround pooling model
        retinalRFmodelParams = MosaicPoolingOptimizer.chooseRFmodelForSurroundConePoolingOptimization(...
            mosaicParams, opticsParamsForComputeReadyMosaic);

       % Generate the filename of the compute-ready mRGCMosaic
       [computeReadyMosaicFileName, computeReadyMosaicResourcesDirectory] = ...
            MosaicPoolingOptimizer.resourceFileNameAndPath('computeReadyMosaic', ...
                'mosaicParams', mosaicParams, ...
                'opticsParams', opticsParamsForComputeReadyMosaic, ...
                'retinalRFmodelParams', retinalRFmodelParams);

       % Now, ask the user what optics were used for computing the input cone
        % mosaic STF responses, so we can obtain the corresponding coneMosaicSTFresponsesFileName
        fprintf('\n---> Select the optics that were used to compute the input cone mosaic STF responses on which the mRGC mosaic STF responses were based on\n');
            opticsParamsForMRGCSTFs = MosaicPoolingOptimizer.chooseOpticsForInputConeMosaicSTFresponses(mosaicParams);
    
        % Generate filename for the computed mRGCMosaicSTF responses
        [mRGCMosaicSTFresponsesFileName, resourcesDirectory] = ...
        MosaicPoolingOptimizer.resourceFileNameAndPath('mRGCMosaicSTFresponses', ...
            'mosaicParams', mosaicParams, ...
            'opticsParams', opticsParamsForMRGCSTFs);
    
        fprintf('\n---> Select the chromaticity that was used to compute the input cone mosaic STF responses on which the mRGC mosaic STF responses were based on\n');
        % Ask the user what stimulus chromaticity to use
        [~, mRGCMosaicSTFresponsesFileName] = ...
            MosaicPoolingOptimizer.chooseStimulusChromaticityForMosaicResponsesAndUpdateFileName(...
                mRGCMosaicSTFresponsesFileName, 'STFresponses');


        theMosaicFileNames{iMosaic} = fullfile(computeReadyMosaicResourcesDirectory, computeReadyMosaicFileName);
        theMRGCSTFResponsesFileNames{iMosaic} = fullfile(resourcesDirectory, mRGCMosaicSTFresponsesFileName);
   end % iEcc

   [~, ~, pdfsDirectory] = MosaicPoolingOptimizer.resourceFileNameAndPath('pdfsDirectory', ...
       'mosaicParams', mosaicParams);

   onlyShowCronerKaplan95Data = true;
   showZscoresInsteadOfData = true;
   MosaicPoolingOptimizer.visualizeFittedSTFsOfComputeReadyMidgetRGCMosaic(...
            theMosaicFileNames, ...
            theMRGCSTFResponsesFileNames, ...
            pdfsDirectory, ...
            showZscoresInsteadOfData, onlyShowCronerKaplan95Data, ...
            employTemporalEquivalentEccentricity);

   showZscoresInsteadOfData = false;
   MosaicPoolingOptimizer.visualizeFittedSTFsOfComputeReadyMidgetRGCMosaic(...
            theMosaicFileNames, ...
            theMRGCSTFResponsesFileNames, ...
            pdfsDirectory, ...
            showZscoresInsteadOfData, onlyShowCronerKaplan95Data, ...
            employTemporalEquivalentEccentricity);
end