function generateDefaultConeMosaic(obj, opticalPositionDegs)

    % Set cone aperture modifiers
    % Use a Gaussian cone aperture with
    % sigma equal to 0.204 x inner segment diameter (cone diameter)
    sigmaGaussian = 0.204;  % From McMahon et al, 2000
    coneApertureModifiers = struct(...
        'smoothLocalVariations', true, ...
        'sigma',  sigmaGaussian, ...
        'shape', 'Gaussian');

    % One L- and one M-cone only
    obj.coneMosaic = cMosaic(...
        'sourceLatticeSizeDegs', 58, ...
        'eccentricityDegs', opticalPositionDegs, ...
        'sizeDegs', [0.02 0.01]*(1+sqrt(sum(opticalPositionDegs.^2,2))), ...
        'whichEye', obj.defaultOpticsParams.analyzedEye, ...
        'customDegsToMMsConversionFunction', @(x)RGCmodels.Watson.convert.rhoDegsToMMs(x), ...
        'customMMsToDegsConversionFunction', @(x)RGCmodels.Watson.convert.rhoMMsToDegs(x), ...
        'overlappingConeFractionForElimination', 0.5, ...
        'rodIntrusionAdjustedConeAperture', true, ...
        'coneApertureModifiers', coneApertureModifiers);


    obj.coneMosaic.reassignTypeOfCones([], cMosaic.KCONE_ID);
    % Cone with index 1 will be an L-cone
    obj.coneMosaic.reassignTypeOfCones(1, cMosaic.LCONE_ID);
    % Cone with index 2 will be an M-cone
    obj.coneMosaic.reassignTypeOfCones(2, cMosaic.MCONE_ID);
end
