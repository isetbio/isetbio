function t_midgetRGCMosaicDemo()

positionDegs = [3 0];
sizeDegs = [0.5 0.3];

% Load a precomputed mosaic at the same eccentricity
RTVFTsourceDir = '/Volumes/SSDdisk/MATLAB/toolboxes/isetbio/isettools/ganglioncells/JohannesAnalysesData';
dataFile = fullfile(RTVFTsourceDir, sprintf('mosaicAndPolans2015_Subject6_optics_EccXY_%2.2f_%2.2f.mat', positionDegs(1), positionDegs(2)));
load(dataFile, 'theMidgetRGCmosaic');

% Exctract from the mosaic, the baked RTVFT data (which is normally loaded
% from an RTVFT data file)
theOpticsPositionGrid = theMidgetRGCmosaic.theOpticsPositionGrid;
theConesNumPooledByTheRFcenterGrid = theMidgetRGCmosaic.theConesNumPooledByTheRFcenterGrid;
theVisualSTFSurroundToCenterRcRatioGrid = theMidgetRGCmosaic.theVisualSTFSurroundToCenterRcRatioGrid;
theVisualSTFSurroundToCenterIntegratedSensitivityRatioGrid = theMidgetRGCmosaic.theVisualSTFSurroundToCenterIntegratedSensitivityRatioGrid;
theRTFVTobjList = theMidgetRGCmosaic.theRetinaToVisualFieldTransformerOBJList;
clear 'theMidgetRGCmosaic'

tic
% Generate a midget RGC mosaic
myMidgetRGCmosaic = midgetRGCMosaic(...
    'sourceLatticeSizeDegs', 60, ...
    'whichEye', 'right eye', ...
    'eccentricityDegs', positionDegs, ...
    'sizeDegs', sizeDegs ...
    );
toc

tic
myMidgetRGCmosaic.visualize()
toc

tic
myMidgetRGCmosaic.visualize(...
    'xRangeDegs', [], ...
    'yRangeDegs', [], ...
    'maxVisualizedRFs', [])
toc

tic
myMidgetRGCmosaic.visualize(...
    'xRangeDegs', myMidgetRGCmosaic.inputConeMosaic.sizeDegs(1), ...
    'yRangeDegs', myMidgetRGCmosaic.inputConeMosaic.sizeDegs(2), ...
    'maxVisualizedRFs', []);
toc

load(RTVFTdataFile, ...
    'theRTFVTobjList', ...
    'theOpticsPositionGrid', ...
    'theConesNumPooledByTheRFcenterGrid', ...
    'theVisualSTFSurroundToCenterRcRatioGrid', ...
    'theVisualSTFSurroundToCenterIntegratedSensitivityRatioGrid');

tic
% Generate C/S spatial RFs for all cells in the  midgetRGCmosaic
myMidgetRGCmosaic.generateCenterSurroundSpatialPoolingRF(...
    theRTFVTobjList, ...
    theOpticsPositionGrid, ...
    theConesNumPooledByTheRFcenterGrid, ...
    theVisualSTFSurroundToCenterRcRatioGrid, ...
    theVisualSTFSurroundToCenterIntegratedSensitivityRatioGrid);
toc

% Delete RTVT data (now stored in the mosaic)
clear 'theOpticsPositionGrid'
clear 'theConesNumPooledByTheRFcenterGrid'
clear 'theVisualSTFSurroundToCenterRcRatioGrid'
clear 'theVisualSTFSurroundToCenterIntegratedSensitivityRatioGrid'
clear 'theRTFVTobjList'


stimulusPixelsNum = 256;
sceneFOVdegs = myMidgetRGCmosaic.inputConeMosaic.sizeDegs;
retinalImageResolutionDegs = max(sceneFOVdegs)/stimulusPixelsNum;
viewingDistanceMeters = 4;

theDisplay = rfMappingStimulusGenerator.presentationDisplay(...
            myMidgetRGCmosaic.inputConeMosaic.wave, retinalImageResolutionDegs, ...
            viewingDistanceMeters);

% Stim params for the STF mapping
stimParams = struct(...
            'backgroundLuminanceCdM2', 50.0, ...
            'backgroundChromaticity', [0.301 0.301], ...
            'coneContrasts', [0.6 0.6 0.6], ...
            'contrast', 0.75, ...
            'spatialFrequencyCPD', 4, ...
            'orientationDegs', 70, ...
            'spatialPhaseIncrementDegs', 30, ...
            'pixelSizeDegs', retinalImageResolutionDegs, ...
            'stimSizeDegs', max(sceneFOVdegs), ...
            'wavelengthSupport', displayGet(theDisplay, 'wave'), ...
            'viewingDistanceMeters', displayGet(theDisplay, 'viewing distance') ...
            );

% Generate spatial modulation patterns for each stimulus frame
theDriftingGratingSpatialModulationPatterns = ...
    rfMappingStimulusGenerator.driftingGratingFrames(stimParams);
    
% Generate scenes for the different spatial phases
[theDriftingGratingFrameScenes, theNullStimulusScene] = ...
    rfMappingStimulusGenerator.generateStimulusMappingFramesOnPresentationDisplay(...
    theDisplay, stimParams, theDriftingGratingSpatialModulationPatterns, ...
    'validateScenes', false);


% Allocate memory
stimulusFramesNum = numel(theDriftingGratingFrameScenes);
myMidgetRGCMosaicFrameResponses = zeros(stimulusFramesNum, myMidgetRGCmosaic.cellsNum);
theInputConeMosaicFrameResponses = zeros(stimulusFramesNum, myMidgetRGCmosaic.inputConeMosaic.conesNum);
theOpticalImages = cell(1, stimulusFramesNum);

for iFrame = 1:stimulusFramesNum 
    % Get scene corresponding to this stimulus frame
    theScene = theDriftingGratingFrameScenes{iFrame};

    % Compute the mosaic's response to this stimulus frame
    [myMidgetRGCMosaicFrameResponses(iFrame,:), ~, ...
     theInputConeMosaicFrameResponses(iFrame,:), ...
     theOpticalImages{iFrame}] = ...
                myMidgetRGCmosaic.compute(theScene, ...
                'nTrials', 1, ...
                'theNullScene', theNullStimulusScene, ...
                'normalizeConeResponsesWithRespectToNullScene', true);

end

end
