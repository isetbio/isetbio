function theOI = multiFocalRTVFopticsAtPosition(obj, eccDegs)
    
    assert(numel(eccDegs) == 2, 'eccDegs must be a 2-element vector');

    d = bsxfun(@minus,obj.multifocalRTVFgrids.samplingPositionGrid, [eccDegs(1) eccDegs(2)]);
    [~, iObj] = min(sum(d.^2,2));
    opticsParams = obj.multifocalRTVFopticsParams{iObj};

    fprintf('\n\nRecreating the multifocalRTVF optics at (x,y) position: %+2.2f %+2.2f\n', ...
        obj.multifocalRTVFgrids.samplingPositionGrid(iObj,1), ...
        obj.multifocalRTVFgrids.samplingPositionGrid(iObj,2));

    % Generate the OI based on the retrieved opticsParams
    oiEnsemble = obj.inputConeMosaic.oiEnsembleGenerate(opticsParams.positionDegs, ...
          'zernikeDataBase', opticsParams.ZernikeDataBase, ...
          'subjectID', opticsParams.testSubjectID, ...
          'pupilDiameterMM', opticsParams.pupilDiameterMM, ...
          'refractiveErrorDiopters', opticsParams.refractiveErrorDiopters, ...
          'zeroCenterPSF', opticsParams.zeroCenterPSF, ...
          'subtractCentralRefraction', opticsParams.subtractCentralRefraction, ...
          'wavefrontSpatialSamples', opticsParams.wavefrontSpatialSamples, ...
          'upsampleFactor', opticsParams.psfUpsampleFactor, ...
          'warningInsteadOfErrorForBadZernikeCoeffs', true);
    theOI = oiEnsemble{1};
end