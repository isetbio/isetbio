function hFig = visualizeCurrentConnectivityState(obj, figNo)
% Visualize current connectivity state.
    hFig = figure(figNo); clf;
    if (~isempty(obj.coneConnectivityMatrix))
        subplotPosVectors = NicePlot.getSubPlotPosVectors(...
           'rowsNum', 2, ...
           'colsNum', 2, ...
           'heightMargin',  0.07, ...
           'widthMargin',    0.06, ...
           'leftMargin',     0.03, ...
           'rightMargin',    0.00, ...
           'bottomMargin',   0.05, ...
           'topMargin',      0.01);
        set(hFig, 'Color', [1 1 1], 'Position', [10 10 1650 1000]);
    else
        subplotPosVectors = NicePlot.getSubPlotPosVectors(...
           'rowsNum', 2, ...
           'colsNum', 1, ...
           'heightMargin',  0.07, ...
           'widthMargin',    0.06, ...
           'leftMargin',     0.03, ...
           'rightMargin',    0.00, ...
           'bottomMargin',   0.05, ...
           'topMargin',      0.01);
        set(hFig, 'Color', [1 1 1], 'Position', [10 10 950 1000]);
    end


    ax = subplot('Position', subplotPosVectors(1,1).v);
    [~,~,XLims, YLims] = obj.visualizeInputMosaics(...
        'figureHandle', hFig, ...
        'axesHandle', ax, ...
        'thetaSamples', 30, ...
        'titleString', 'starting positions');
    set(ax, 'FontSize', 16)

    ax = subplot('Position', subplotPosVectors(2,1).v);
    obj.visualizeConnectivity(...
        'figureHandle', hFig, ...
        'axesHandle', ax, ...
        'XLims', XLims, ...
        'YLims', YLims);

    % Report statistics of spatial/chromatic cost
    if (~isempty(obj.coneConnectivityMatrix))
        rgcsNum = size(obj.coneConnectivityMatrix,2);
        totalCost = zeros(1, rgcsNum);
        spatialCost = zeros(1, rgcsNum);
        chromaticCost = zeros(1, rgcsNum);

        % Compute current costs
        for iRGC = 1:rgcsNum
            % Indices of input cones
            connectedConeIndices = find(squeeze(obj.coneConnectivityMatrix(:, iRGC))>0);
            % Weights of input cones
            inputConeWeights = full(obj.coneConnectivityMatrix(connectedConeIndices, iRGC));
            % Compute the costs
            [totalCost(iRGC), spatialCost(iRGC), chromaticCost(iRGC)] = obj.costToMaintainInputs(...
                connectedConeIndices, inputConeWeights, ...
                obj.RGCRFspacingsMicrons(iRGC));
        end

        ax = subplot('Position', subplotPosVectors(1,2).v);
        obj.visualizeSpatialVarianceCostStatistics(ax, spatialCost);
        ax = subplot('Position', subplotPosVectors(2,2).v);
        obj.visualizeChromaticVarianceCostStatistics(ax, chromaticCost);
    end


end