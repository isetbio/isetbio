function generateOpticsAtPosition(obj, wavefrontOpticsPositionDegs)

    % Retrieve the optics params from the RTVFTobj closest to the mosaic center
    [~, opticalPositionIndex] = min(sum((bsxfun(@minus, obj.theSamplingPositionGrid, [wavefrontOpticsPositionDegs(1) wavefrontOpticsPositionDegs(2)])).^2,2));
    
    if (~isempty(obj.theCurrentOpticalImagePositionGridIndex)) && (obj.theCurrentOpticalImagePositionGridIndex == opticalPositionIndex)
        % Optics already computed. Return
        % fprintf('Using existing optical image from position (%2.2f, %2.2f) degs\n', obj.theSamplingPositionGrid(opticalPositionIndex,:));
        return;
    end

    theRTVFTobj = obj.theRetinaToVisualFieldTransformerOBJList{opticalPositionIndex};
    opticsParams = theRTVFTobj.opticsParams;
    fprintf('Computing retinal image using optics at (%2.2f,%2.2f) degs\n', ...
            opticsParams.positionDegs(1), opticsParams.positionDegs(2));

    % Generate the OI based on the retrieved opticsParams
    oiEnsemble = obj.inputConeMosaic.oiEnsembleGenerate(opticsParams.positionDegs, ...
                        'zernikeDataBase', opticsParams.ZernikeDataBase, ...
                        'subjectID', opticsParams.testSubjectID, ...
                        'pupilDiameterMM', opticsParams.pupilDiameterMM, ...
                        'refractiveErrorDiopters', opticsParams.refractiveErrorDiopters, ...
                        'zeroCenterPSF', opticsParams.zeroCenterPSF, ...
                        'subtractCentralRefraction', opticsParams.subtractCentralRefraction, ...
                        'wavefrontSpatialSamples', opticsParams.wavefrontSpatialSamples, ...
                        'upsampleFactor', opticsParams.psfUpsampleFactor, ...
                        'warningInsteadOfErrorForBadZernikeCoeffs', true);    

    % Update the currentOpticalImage
    obj.theCurrentOpticalImage = oiEnsemble{1};
    obj.theCurrentOpticalImagePositionGridIndex = opticalPositionIndex;
end
