function testRGCconnector

    % Generate the input cone mosaic
    theInputConeMosaic = cMosaic(...
        'sizeDegs', [0.6 0.6], ...
        'eccentricityDegs', [0 1]+3, ...
        'coneDensities', [0.6 0.3 0.1]);

    % Initialize with a precomputed RGC lattice
    RGCRFposMicronsPrecomputed = RGCRFconnector.initializeWithPrecomputedLattice(...
        theInputConeMosaic);
    
    % Initialize with a perfect hex lattice
    coneToRGCDensityRatio = size(theInputConeMosaic.coneRFpositionsMicrons,1)/size(RGCRFposMicronsPrecomputed,1);
    RGCRFposMicronsPerfect = RGCRFconnector.initializeWithPerfectHexLattice(...
        theInputConeMosaic, coneToRGCDensityRatio);
    
    % visualizeInitialPositions(theInputConeMosaic, RGCRFposMicronsPerfect, RGCRFposMicronsPrecomputed);

    % Initial wiring, where each cone gets assigned to at least one RGC
    % If 2 or more cones get assigned to the same RGC, there can be a bias towards
    % minimizing spatial variance or minimizing chromatic variance.
    % This is controlled by the value of chromaticSpatialVarianceTradeoff, w,  
    % which is used to compute the cost for maintaning one RGC's cone inputs as follows:
    %
    % w-VALUE   COST FUNCTION                                           RESULT 
    % 1         proportional to spatial variance                        Minimize spatial variance, ignoring homogeneity of input cone types
    % 0         proportional to chromatic variance, e.g.:
    %             lConesNum/mConesNum, if lConesNum < mConesNum, or     Minimize chromatic variance, ignoring spatial position of input cones
    %             mConesNum/lConesNum, if mConesNum < lConesNum
    % 0<w<1     w * spatialVariance + (1-w)*chromatic variance          Minimize the combined chromatic+spatial variance

    chromaticSpatialVarianceTradeoff = 0;
    maxNearbyRGCsNum = 7;
    visualizeProgression = true;
    [RGCRFinputs, RGCRFweights] = RGCRFconnector.wireInputConeMosaicToRGCRFs(...
        theInputConeMosaic, ...
        RGCRFposMicronsPerfect, ...
        chromaticSpatialVarianceTradeoff, ...
        maxNearbyRGCsNum, ...
        visualizeProgression);


    
end

function visualizeInitialPositions()
    hFig = figure(1); clf;
    set(hFig, 'Color', [1 1 1], 'Position', [10 10 1400 600]);
    ax = subplot(1,2,1);
    [~, ~, XLims, YLims] = RGCRFconnector.plotRGCRFpos(RGCRFposMicronsPerfect,...
        'figureHandle', hFig, ...
        'axesHandle', ax, ...
        'inputConeMosaic', theInputConeMosaic, ...
        'thetaSamples', 30, ...
        'titleString', sprintf('perfect hex RGC lattice with corresponding density\n(RGF RFs num: %d)', size(RGCRFposMicronsPerfect,1)));
    ax = subplot(1,2,2);
    RGCRFconnector.plotRGCRFpos(RGCRFposMicronsPrecomputed,...
        'figureHandle', hFig, ...
        'axesHandle', ax, ...
        'inputConeMosaic', theInputConeMosaic, ...
        'XLims', XLims, 'YLims', YLims, ...
        'titleString', sprintf('mRGC RF lattice at corresponding ecc\n(RGF RFs num: %d)', size(RGCRFposMicronsPrecomputed,1)));
    
end
