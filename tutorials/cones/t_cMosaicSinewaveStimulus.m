% Demo computing off-axis responses to sinewave stimuli
%
% Description:
% Demonstrate usage of @cMosaic, +PolansOptics to compute cone excitations 
%    to sinewave stimuli and display the cone mosaic, the PSF and the mosaic
%    cone excitations and modulations
%
% See Also:
%   t_cMosaicOffAxisDistortion
%   t_cMosaicRankedSubjectsOptics

% History:
%    07/20/21  NPC  ISETBIO Team, Copyright 2021 Wrote it.

function t_cMosaicSinewaveStimulus

    whichEye = 'right eye';             % choose between {'right eye', 'left eye'}
    opticsDataBase = 'Artal2012';      % choose between {'Polans2015', 'Artal2012'}
    subjectRankOrder = 4;
    
    % Mosaic size in degrees
    mosaicSizeDegs = [2 1.5]; 
    
    % Mosaic eccentricities
    horizontalEccDegs = [0 5 10 25];
    
    for iEcc = 1:numel(horizontalEccDegs)
        % Mosaic ecc
        mosaicEccDegs = [horizontalEccDegs(iEcc) 0];

        % Run simulation (low frequency)
        theConeMosaic = [];
        stimulusSpatialFrequencyCPD = 2;
        [theConeMosaic, thePSFData, ...
         noiseFreeConeMosaicTestStimulusActivation, ...
         noisyConeMosaicActivationInstances, ...
         coneMosaicNullStimulusActivation] = simulateCondition(whichEye, ...
              mosaicEccDegs, mosaicSizeDegs, opticsDataBase, subjectRankOrder, ...
              stimulusSpatialFrequencyCPD, theConeMosaic);

        % Visualize results
        visualizeResults(theConeMosaic, thePSFData, ...
            noiseFreeConeMosaicTestStimulusActivation, coneMosaicNullStimulusActivation, stimulusSpatialFrequencyCPD);


        % Run simulation (high frequency)
        stimulusSpatialFrequencyCPD = 6;
        [theConeMosaic, thePSFData, ...
         noiseFreeConeMosaicTestStimulusActivation, ...
         noisyConeMosaicActivationInstances, ...
         coneMosaicNullStimulusActivation] = simulateCondition(whichEye, ...
              mosaicEccDegs, mosaicSizeDegs, opticsDataBase, subjectRankOrder, ...
              stimulusSpatialFrequencyCPD, theConeMosaic);

        % Visualize results
        visualizeResults(theConeMosaic, thePSFData, ...
            noiseFreeConeMosaicTestStimulusActivation, coneMosaicNullStimulusActivation, stimulusSpatialFrequencyCPD);
    end
end

function visualizeResults(cm, thePSFData, noiseFreeConeMosaicTestStimulusActivation, coneMosaicNullStimulusActivation, stimulusSpatialFrequencyCPD)
    
    % Retrieve the PSF at 550 nm
    targetWavelength = 550;
    [~,idx] = min(abs(thePSFData.supportWavelength-targetWavelength));
    psf = squeeze(thePSFData.data(:,:,idx));
    
    % Normalize to unit amplitude
    psf = psf/max(psf(:));
    
    % Get spatial support, adjusting for the mosaic's eccentricity 
    % (so that the PSF is plotted at the center of the mosaic)
    psfSupportDegs = thePSFData.supportX/60;
    psfSupportDegsX = psfSupportDegs + cm.eccentricityDegs(1);
    psfSupportDegsY = psfSupportDegs + cm.eccentricityDegs(2);
    
    
    % Setup figure
    hFig = figure(2); clf;
    set(hFig, 'Position', [10 10 570 1320], 'Color', [1 1 1]);
    
    % Percentage of mosaic to be visualized within the inset
    visualizedFraction = 0.1;
    w = cm.sizeDegs(1);
    % Visualize part of the mosaic
    domainVisualizationLimsInset(1:2) = cm.eccentricityDegs(1) + visualizedFraction*w/2*[-1 1];
    domainVisualizationLimsInset(3:4) = cm.eccentricityDegs(2) + visualizedFraction*w/2*[-1 1];
    domainVisualizationTicks = struct('x',  [nan], 'y', [nan]);
    

    % Visualize the entire mosaic
    ax = axes('Position',[0.1 0.70 0.89 0.28]);
    cm.visualize('figureHandle', hFig, ...
        'axesHandle', ax, ...
        'domain', 'degrees', ...
        'labelCones', true, ...
        'visualizedConeAperture', 'geometricArea', ...
        'fontSize', 14, ...
        'noYLabel', ~true, ...
        'noXLabel', ~true, ...
        'plotTitle', 'cone mosaic');

    % Co-visualize the PSF
    hold(ax, 'on');
    cmap = brewermap(1024,'reds');
    alpha = 0.5;
    contourLineColor = [0.0 0.0 0.0];
    cMosaic.semiTransparentContourPlot(ax, psfSupportDegsX, psfSupportDegsY, psf, 0.05:0.2:0.95, cmap, alpha, contourLineColor);
  

    
    % Inset showing a high-res version of the mosaic and the PSF
    ax = axes('Position', [0.69 0.78 0.27 0.27], 'Color',[1 1 1]);
    cm.visualize('figureHandle', hFig, ...
        'axesHandle', ax, ...
        'domain', 'degrees', ...
        'domainVisualizationLimits', domainVisualizationLimsInset, ...
        'domainVisualizationTicks', domainVisualizationTicks, ...
        'labelCones', ~true, ...
        'visualizedConeAperture', 'geometricArea', ...
        'fontSize', 14, ...
        'noYLabel', true, ...
        'noXLabel', true, ...
        'backgroundColor', [0 0 0], ...
        'plotTitle', ' ');
    
    % Co-visualize the PSF
    hold(ax, 'on');
    cmap = brewermap(1024,'reds');
    alpha = 0.5;
    contourLineColor = [0.0 0.0 0.0];
    cMosaic.semiTransparentContourPlot(ax, psfSupportDegsX, psfSupportDegsY, psf, 0.05:0.2:0.95, cmap, alpha, contourLineColor);
  


    % Plot the mosaic's activation by the stimulus
    ax = axes('Position',[0.1 0.36 0.89 0.28]);
    cm.visualize('figureHandle', hFig, ...
              'axesHandle', ax, ...
              'activation', noiseFreeConeMosaicTestStimulusActivation, ... 
              'activationRange', [0 1800], ...
              'activationColorMap', brewermap(1024, '*greys'), ...
              'labelCones', ~true, ...
              'crossHairsOnFovea', false, ...
              'visualizedConeAperture', 'geometricArea', ...
              'verticalActivationColorbarInside', true, ...
              'colorbarTickLabelColor', [1 0.5 0], ...
              'domain','degrees', ...
              'noYLabel', ~true, ...
              'noXLabel', true, ...
              'fontSize', 14, ...
              'backgroundColor', [0 0 0], ...  
              'plotTitle',  sprintf('mosaic activation (stimulus spatial frequency = %2.0f c/deg)',stimulusSpatialFrequencyCPD));
    
    % Compute the mosaic's modulated activation
    modulatedResponse = (noiseFreeConeMosaicTestStimulusActivation-coneMosaicNullStimulusActivation)./coneMosaicNullStimulusActivation;
 
    % Plot the mosaic's modulated activation
    ax = axes('Position',[0.1 0.04 0.89 0.28]);
    
    cm.visualize('figureHandle', hFig, ...
              'axesHandle', ax, ...
              'activation', modulatedResponse, ...  % modulated response
              'activationRange', [-1 1], ...
              'activationColorMap', brewermap(1024, '*greys'), ...
              'labelCones', ~true, ...
              'visualizedConeAperture', 'geometricArea', ...
              'verticalActivationColorBarInside', true, ...
              'colorbarTickLabelColor', [1 0.5 0], ...
              'crossHairsOnFovea', false, ...
              'domain','degrees', ...
              'noYLabel', ~true, ...
              'fontSize', 14, ...
              'backgroundColor', [0 0 0], ...  
              'plotTitle',  sprintf('mosaic modulation (stimulus spatial frequency = %2.0f c/deg)', stimulusSpatialFrequencyCPD));
          
     NicePlot.exportFigToPDF(sprintf('ECC_%2.0fDEGS_SF_%2.0fCPD.pdf', cm.eccentricityDegs(1), stimulusSpatialFrequencyCPD),hFig, 300);
          
end

function [cm, thePSFData, noiseFreeConeMosaicTestStimulusActivation, ...
          noisyConeMosaicActivationInstances, ...
          coneMosaicNullStimulusActivation] =  simulateCondition(whichEye, ...
          mosaicEccDegs, mosaicSizeDegs, opticsDataBase, subjectRankOrder, stimulusSpatialFrequencyCPD, cm)
      
    % Setup stimulus params
    sParams = struct(...
                'contrast', 0.7, ...
                'chromaDir', [1 1 1], ...
                'meanLuminanceCdPerM2', 100, ...
                'sf', stimulusSpatialFrequencyCPD, ...
                'fovDegs', max(mosaicSizeDegs), ...
                'orientation', 90, ...
                'spatialEnvelope', 'rect', ...  % choose between {'rect', 'disk', 'soft'}
                'spatialEnvelopeRadiusDegs', max(mosaicSizeDegs)/2, ...
                'spatialPhase', 180, ...
                'pixelsNum', 1024, ...
                'minPixelsNumPerCycle', 11, ...
                'spectralSupport', [450:25:700], ...
                'presentationMode', 'flashed', ...
                'duration', 1000/1000, ...
                'warningInsteadOfErrorOnOutOfGamut', false ...
     );
 
    % Compute the test and null stimulus scenes
    [stimulusSceneSequence, theNullStimulusScene, statusReport] = ...
        CSFGeneratorApp.generate.gratingSceneEngine(sParams, []);
    theTestStimulusScene = stimulusSceneSequence{1};
    
    if (isempty(cm))
        % Generate the cone mosaic
        cm = cMosaic(...
            'whichEye', whichEye, ...         
            'sizeDegs', mosaicSizeDegs, ...    
            'eccentricityDegs', mosaicEccDegs, ...  
            'opticalImagePositionDegs', 'mosaic-centered' ...
            );
    end
    
    % Get optics params for given database and subject ranking
    switch (opticsDataBase)
        case 'Polans2015'
            % Obtain subject IDs ranking in decreasing foveal resolution
            rankedSujectIDs = PolansOptics.constants.subjectRanking;
            testSubjectID = rankedSujectIDs(subjectRankOrder);

            % Determine if we need to subtract the subject's central refraction
            subtractCentralRefraction = PolansOptics.constants.subjectRequiresCentralRefractionCorrection(testSubjectID);

        case 'Artal2012'
            % Obtain subject IDs ranking in decreasing foveal resolution
            rankedSujectIDs = ArtalOptics.constants.subjectRanking(whichEye);
            testSubjectID = rankedSujectIDs(subjectRankOrder);

            % Determine if we need to subtract the subject's central refraction
            subtractCentralRefraction = ArtalOptics.constants.subjectRequiresCentralRefractionCorrection(whichEye, testSubjectID);
    end
    
 
    % Generate optics appropriate for the mosaic's eccentricity  
    [oiEnsemble, psfEnsemble] = cm.oiEnsembleGenerate(cm.eccentricityDegs, ...
                    'zernikeDataBase', opticsDataBase, ...
                    'subjectID', testSubjectID, ...
                    'pupilDiameterMM', 3.0, ...
                    'zeroCenterPSF', true, ...
                    'subtractCentralRefraction', subtractCentralRefraction, ...
                    'wavefrontSpatialSamples', 501);
                
    % Retrieve the OI - used for computation
    theOI = oiEnsemble{1};   
    
    % Retrieve the PSF - used for visualization
    thePSFData = psfEnsemble{1};  
 
    % Compute the optical image of the stimulus
    theStimulusOI = oiCompute(theTestStimulusScene, theOI);
 
    % Compute the optical image of the null stimulus
    theNullStimulusOI = oiCompute(theNullStimulusScene, theOI);
 
    % Compute the mosaic response to the test stimulus
    nInstances = 2;
    [noiseFreeConeMosaicTestStimulusActivation, ...
     noisyConeMosaicActivationInstances] = cm.compute(theStimulusOI, 'nTrials', nInstances);

    % Compute the mosaic response to the null stimulus
    coneMosaicNullStimulusActivation = cm.compute(theNullStimulusOI);
end


    