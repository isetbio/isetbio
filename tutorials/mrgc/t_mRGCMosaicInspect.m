function t_mRGCMosaicInspect(options)
% Visualize mRGCMosaics
%
% Description:
%    Demonstrates the following:
%    (i)   how to load a pre-baked midget RGC mosaic, 
%    (ii)  visualize the mosaic of RF centers,
%    (iii) visualize the PSF of the optics used to build the mosaic
%    (iv)  visualize the RF center and surround cone pooling maps of
%          individual cells within the mosaic
%
%  This is set up with key/value pairs that demonstate how to select different
%  options. Different choices are illustrated in the examples
%  in the source code.
%
% Optional key/value pairs
%    See source code arguments block for a list of key/value pairs.

% History:
%    07/28/25  NPC  Wrote it.

% Examples:
%{
    t_mRGCMosaicInspect();

    % Visualize a mosaic synthesized at 10 deg along the temporal meridian
    t_mRGCMosaicInspect(...
        'rgcMosaicName', 'PLOSpaperTemporal10DegsMosaic', ...
        'opticsSubjectName', 'PLOSpaperDefaultSubject');
%}


arguments

    % ---- Name encoding properties of the rgcMosaic, such as its eccentricity ---
    % See RGCMosaicConstructor.helper.utils.initializeRGCMosaicGenerationParameters
    % for what is available and to add new mosaics
    options.rgcMosaicName (1,:) ...
        char ...
        {...
        mustBeMember(options.rgcMosaicName, ...
            { ...
            'PLOSpaperNasal25DegsMosaic' ...
            'PLOSpaperNasal19DegsMosaic' ...
            'PLOSpaperNasal14DegsMosaic' ...
            'PLOSpaperNasal10DegsMosaic' ...
            'PLOSpaperNasal7DegsMosaic' ...
            'PLOSpaperNasal2DegsTinyMosaic' ...
            'PLOSpaperFovealMosaic' ...
            'PLOSpaperTemporal2DegsMosaic' ...
            'PLOSpaperTemporal4DegsMosaic' ...
            'PLOSpaperTemporal7DegsMosaic' ...
            'PLOSpaperTemporal10DegsMosaic' ...
            'PLOSpaperTemporal14DegsMosaic' ...
            'PLOSpaperTemporal19DegsMosaic' ...
            'PLOSpaperTemporal25DegsMosaic' ...
            'PLOSpaperTemporal32DegsMosaic' ...
            } ...
            ) ...
        } ...
        = 'PLOSpaperTemporal7DegsMosaic';


    % ---- Which species to employ ----
    % Choose between {'macaque', 'human'}. If 'macaque' is chosen, the input
    % cone mosaic has a 1:1 L/M cone ratio.
    options.coneMosaicSpecies  (1,:) char {mustBeMember(options.coneMosaicSpecies,{'human','macaque'})} = 'human';

     % ----- Which subject optics to employ -----
    options.opticsSubjectName (1,:) ...
        char ...
        {...
        mustBeMember(options.opticsSubjectName, ...
            { ...
            'PLOSpaperDefaultSubject' ...
            'PLOSpaperSecondSubject' ...
            'VSS2024TalkFirstSubject' ...
            'VSS2024TalkSecondSubject' ...
            'PLOSpaperStrehlRatio_0.87' ...
            'PLOSpaperStrehlRatio_0.72' ...
            'PLOSpaperStrehlRatio_0.59' ...
            'PLOSpaperStrehlRatio_0.60' ...
            'PLOSpaperStrehlRatio_0.27' ...
            'PLOSpaperStrehlRatio_0.23' ...
            'PLOSpaperStrehlRatio_0.21' ...
            'PLOSpaperStrehlRatio_0.19' ...
            'PLOSpaperStrehlRatio_0.09' ...
            } ...
            ) ...
        } ...
        = 'PLOSpaperSecondSubject';


    % ------ targetVisualSTF options ----
    % Options are : {'default', 'x1.3 RsRcRatio'}
    % These are with respect to the macaque data of the Croner & Kaplan '95 study
    % 'default': target the mean Rs/Rc, and the mean Ks/Kc (Rs/Rc)^2
    % See RGCMosaicConstructor.helper.surroundPoolingOptimizerEngine.generateTargetVisualSTFmodifiersStruct
    % for all existing options
    options.targetVisualSTFdescriptor (1,:) char = 'default';


    % Whether to close previously open figures
    options.closePreviouslyOpenFigures (1,1) logical = true;
end


% Set flags from key/value pairs
rgcMosaicName = options.rgcMosaicName;
coneMosaicSpecies = options.coneMosaicSpecies;
opticsSubjectName = options.opticsSubjectName;
targetVisualSTFdescriptor = options.targetVisualSTFdescriptor;


closePreviouslyOpenFigures = options.closePreviouslyOpenFigures;

if (closePreviouslyOpenFigures)
    % Close any stray figs
    close all;
end


% Generate pStruct with synthesized mosaic params
pStruct = RGCMosaicConstructor.helper.utils.initializeRGCMosaicGenerationParameters(...
    coneMosaicSpecies, opticsSubjectName, rgcMosaicName, targetVisualSTFdescriptor);

% Extract mosaic and optics params for the original prebaked mosaic
[mosaicParams, opticsParams] = RGCMosaicConstructor.helper.utils.extractSynthesizedMosaicAndOpticsParams(...
    pStruct, targetVisualSTFdescriptor);

% Load the desired mRGCmosaic and the optics that correspond to
% the mosaic's position with optimal refraction 
[theMRGCmosaic, ~, thePSFatTheMosaicEccentricity] = mRGCMosaic.loadPrebakedMosaic(...
        mosaicParams, opticsParams, ...
        'computeTheMosaicOptics', true);


% Subdirectory for exporting the generated PDFs
exportVisualizationPDFdirectory = 'mosaicVisualizationPDFs';


% mRGC mosaic visualization limits and ticks (excluding the extent of the
% input cone mosaic)
visualizedWidthDegs = theMRGCmosaic.sizeDegs(1);
visualizedHeightDegs = theMRGCmosaic.sizeDegs(2);
domainVisualizationLimits(1:2) = theMRGCmosaic.eccentricityDegs(1) + 0.5 * visualizedWidthDegs * [-1 1];
domainVisualizationLimits(3:4) = theMRGCmosaic.eccentricityDegs(2) + 0.5 * visualizedHeightDegs * [-1 1];
domainVisualizationTicks = struct(...
    'x', theMRGCmosaic.eccentricityDegs(1) + 0.5 * visualizedWidthDegs * [-1 -0.5 0 0.5 1], ...
    'y', theMRGCmosaic.eccentricityDegs(2) + 0.5 * visualizedHeightDegs * [-1 -0.5 0 0.5 1]);


% Visualize RF centers using the spatial extent of cones whose RF center pooling weights
% are >= mRGCMosaic.sensitivityAtPointOfOverlap;
% This representation is like the representation used in visualizing 
% mosaics of RGCs in typical in-vitro experiments (e.g. by the Chichilnisky lab)
minCenterConeWeight = mRGCMosaic.sensitivityAtPointOfOverlap;

% Get ready for publication-quality visualization
ff = PublicationReadyPlotLib.figureComponents('1x1 giant rectangular-wide mosaic');

% Plot the mosaic of mRGC RF centers only
hFig = figure(1); clf;
theAxes = PublicationReadyPlotLib.generatePanelAxes(hFig,ff);
ax = theAxes{1,1};

theMRGCmosaic.visualize(...
    'figureHandle', hFig, ...
    'axesHandle', ax, ...
    'identifyInputCones', false, ...
    'identifyPooledCones', false, ...
    'inputConesAlpha', 0.5, ...
    'identifiedConeAperture', 'lightCollectingArea4sigma', ...
    'identifiedConeApertureThetaSamples', 16, ...
    'minConeWeightVisualized', minCenterConeWeight, ...
    'centerSubregionContourSamples', 32, ...
    'domainVisualizationLimits', domainVisualizationLimits, ...
    'domainVisualizationTicks', domainVisualizationTicks, ...
    'plotTitle', sprintf('min center weight visualized: %2.3f', minCenterConeWeight), ...
    'withFigureFormat', ff, ...
    'visualizationPDFfileName', sprintf('fullMRGCmosaicMinCenterConeWeight_%2.3f', minCenterConeWeight), ...
    'exportVisualizationPDF', true, ...
    'exportVisualizationPDFdirectory', exportVisualizationPDFdirectory);




% Visualize RF centers using the spatial extent of cones whose RF center pooling weights
% are > mRGCMosaic.minSensitivityForInclusionOfDivergentConeConnections
% (basically all cones connected to each RF center)
minCenterConeWeight = mRGCMosaic.minSensitivityForInclusionOfDivergentConeConnections;

hFig = figure(2); clf;
theAxes = PublicationReadyPlotLib.generatePanelAxes(hFig,ff);
ax = theAxes{1,1};

theMRGCmosaic.visualize(...
    'figureHandle', hFig, ...
    'axesHandle', ax, ...
    'identifyInputCones', false, ...
    'identifyPooledCones', false, ...
    'inputConesAlpha', 0.5, ...
    'identifiedConeAperture', 'lightCollectingArea4sigma', ...
    'identifiedConeApertureThetaSamples', 16, ...
    'minConeWeightVisualized', minCenterConeWeight, ...
    'centerSubregionContourSamples', 32, ...
    'domainVisualizationLimits', domainVisualizationLimits, ...
    'domainVisualizationTicks', domainVisualizationTicks, ...
    'plotTitle', sprintf('min center weight visualized: %2.3f', minCenterConeWeight), ...
    'withFigureFormat', ff, ...
    'visualizationPDFfileName', sprintf('fullMRGCmosaicMinCenterConeWeight_%2.3f', minCenterConeWeight), ...
    'exportVisualizationPDF', true, ...
    'exportVisualizationPDFdirectory', exportVisualizationPDFdirectory);



% We will plot a smaller region of the mRGC mosaic 
narrowDomainVisualizationLimits(1:2) = theMRGCmosaic.eccentricityDegs(1) + [-1 1];
narrowDomainVisualizationLimits(3:4) = theMRGCmosaic.eccentricityDegs(2) + [-0.5 0.5];
narrowDomainVisualizationTicks = struct(...
    'x', -30:0.2:0, ...
    'y', -10:0.2:10);

% Generate a PSF visualization data struct (containing the vLambda-weighted PSF) for
% visualization purposes
PSFvisualizationOffset = theMRGCmosaic.eccentricityDegs - [mean(narrowDomainVisualizationLimits(1:2)) mean(narrowDomainVisualizationLimits(3:4))];
visualizedPSFData.data = RGCMosaicAnalyzer.compute.vLambdaWeightedPSF(thePSFatTheMosaicEccentricity);
visualizedPSFData.supportXdegs = thePSFatTheMosaicEccentricity.supportX/60 - PSFvisualizationOffset(1);
visualizedPSFData.supportYdegs = thePSFatTheMosaicEccentricity.supportY/60 - PSFvisualizationOffset(2);

% Visualize the mosaic, identifying input cones and 
% superimposing the PSF of the optics at the mosaic's eccentricity
hFig = figure(3); clf;
theAxes = PublicationReadyPlotLib.generatePanelAxes(hFig,ff);
ax = theAxes{1,1};
minCenterConeWeight = mRGCMosaic.sensitivityAtPointOfOverlap;
theMRGCmosaic.visualize(...
    'figureHandle', hFig, ...
    'axesHandle', ax, ...
    'identifyInputCones', true, ...
    'identifyPooledCones', ~true, ...
    'inputConesAlpha', 0.5, ...
    'identifiedConeAperture', 'lightCollectingArea4sigma', ...
    'identifiedConeApertureThetaSamples', 16, ...
    'minConeWeightVisualized', minCenterConeWeight, ...
    'centerSubregionContourSamples', 32, ...
    'domainVisualizationLimits', narrowDomainVisualizationLimits, ...
    'domainVisualizationTicks', narrowDomainVisualizationTicks, ...
    'withSuperimposedPSF', visualizedPSFData, ...
    'plotTitle', sprintf('min center weight visualized: %2.3f', minCenterConeWeight), ...
    'withFigureFormat', ff, ...
    'visualizationPDFfileName', sprintf('zoomedInMRGCmosaicWithPSFminCenterConeWeight_%2.3f', minCenterConeWeight), ...
    'exportVisualizationPDF', true, ...
    'exportVisualizationPDFdirectory', exportVisualizationPDFdirectory);


hFig = figure(4); clf;
theAxes = PublicationReadyPlotLib.generatePanelAxes(hFig,ff);
ax = theAxes{1,1};

theMRGCmosaic.visualize(...
    'figureHandle', hFig, ...
    'axesHandle', ax, ...
    'identifyInputCones', true, ...
    'identifyPooledCones', ~true, ...
    'inputConesAlpha', 0.5, ...
    'identifiedConeAperture', 'lightCollectingArea4sigma', ...
    'identifiedConeApertureThetaSamples', 16, ...
    'minConeWeightVisualized', minCenterConeWeight, ...
    'centerSubregionContourSamples', 32, ...
    'domainVisualizationLimits', narrowDomainVisualizationLimits, ...
    'domainVisualizationTicks', narrowDomainVisualizationTicks, ...
    'withSuperimposedPSF', visualizedPSFData, ...
    'plotTitle', sprintf('min center weight visualized: %2.3f', minCenterConeWeight), ...
    'withFigureFormat', ff, ...
    'visualizationPDFfileName', sprintf('zoomedInMRGCmosaicWithPSFminCenterConeWeight_%2.3f', minCenterConeWeight), ...
    'exportVisualizationPDF', true, ...
    'exportVisualizationPDFdirectory', exportVisualizationPDFdirectory);



% Visualize the mRGC mosaic and its entire input cone mosaic, 
% identifying the location of one exemplar mRGC

hFig = figure(5); clf;
theAxes = PublicationReadyPlotLib.generatePanelAxes(hFig,ff);
ax = theAxes{1,1};

% The index of the exemplar mRGC
theTargetRGCindex = 97;


narrowDomainVisualizationLimits(1:2) = theMRGCmosaic.rgcRFpositionsDegs(theTargetRGCindex,1) + [-0.5 0.5];
narrowDomainVisualizationLimits(3:4) = theMRGCmosaic.rgcRFpositionsDegs(theTargetRGCindex,2) + [-0.5 0.5];

% Ticks every 1 deg
narrowDomainVisualizationTicks = struct(...
    'x', -30:1:30, ...
    'y', -30:1:30);

minCenterConeWeight = mRGCMosaic.sensitivityAtPointOfOverlap;


theMRGCmosaic.visualize(...
    'figureHandle', hFig, ...
    'axesHandle', ax, ...
    'identifyInputCones', true, ...
    'identifyPooledCones', true, ...
    'inputConesAlpha', 0.5, ...
    'identifiedConeAperture', 'lightCollectingArea4sigma', ...
    'identifiedConeApertureThetaSamples', 16, ...
    'minConeWeightVisualized', minCenterConeWeight, ...
    'centerSubregionContourSamples', 32, ...
    'labelRGCsWithIndices', theTargetRGCindex, ...
    'labeledRGCsLineWidth', 2, ...
    'domainVisualizationLimits', narrowDomainVisualizationLimits, ...
    'domainVisualizationTicks', narrowDomainVisualizationTicks, ...
    'plotTitle', sprintf('min center weight visualized: %2.3f (target RGC: %d)', minCenterConeWeight, theTargetRGCindex), ...
    'withFigureFormat', ff, ...
    'visualizationPDFfileName', sprintf('mRGCmosaicMinCenterConeWeightWithLabeledMRGC_%2.3f_targetRGC_%d', minCenterConeWeight, theTargetRGCindex), ...
    'exportVisualizationPDF', true, ...
    'exportVisualizationPDFdirectory', exportVisualizationPDFdirectory);


    % Plot the cone pooling RF map of the exemplar mRGC
    figNo = 1000; figPos = [1000 500];


    % Add a scale bar, 0.15 degs in size
    scaleBarDegs = 0.15;

    % Include surround cones whose pooling weights are >= 0.001
    minSurroundConeWeight = 0.001;
    
    theMRGCmosaic.visualizeCenterSurroundConePoolingMap(theTargetRGCindex, ...
            'minConeWeightForVisualizingRFcenterPooling', minCenterConeWeight, ...
            'minConeWeightForVisualizingRFsurroundPooling', minSurroundConeWeight, ...
            'minSurroundConeWeightRelativity', 'center', ...
            'withLineWeightingFunctions', false, ...
            'scaleBarDegs', scaleBarDegs, ...
            'doNotLabelScaleBar', true, ...
            'plotTitle', sprintf('scale bar: %2.2f degs', scaleBarDegs), ...
            'figNo', figNo, ...
            'figPos', figPos, ...
            'exportToFigurePDFsDirWithPDFFileName', sprintf('RFmap%d.pdf', theTargetRGCindex), ...
            'pdfExportSubDir', exportVisualizationPDFdirectory);

    % Plot the cone pooling RF map of the exemplar mRGC along with
    % line weighting functions of the center and of the surround cone pooling weights
    % along the horizontal and vertical axes
    theMRGCmosaic.visualizeCenterSurroundConePoolingMap(theTargetRGCindex, ...
            'minConeWeightForVisualizingRFcenterPooling', minCenterConeWeight, ...
            'minConeWeightForVisualizingRFsurroundPooling', minSurroundConeWeight, ...
            'minSurroundConeWeightRelativity', 'center', ...
            'withLineWeightingFunctions', true, ...
            'scaleBarDegs', scaleBarDegs, ...
            'doNotLabelScaleBar', true, ...
            'plotTitle', sprintf('scale bar: %2.2f degs', scaleBarDegs), ...
            'figNo', figNo+1, ...
            'figPos', figPos, ...
            'exportToFigurePDFsDirWithPDFFileName', sprintf('RFmap%dWithLineWeightingFunctions.pdf', theTargetRGCindex), ...
            'pdfExportSubDir', exportVisualizationPDFdirectory);



end



function OLD
    % Initializ


    % Generate a video that displays cone pooling RF maps for several
    % mRGCs positioned within a desired ROI within the mRGC mosaic
    p = getpref('isetbio');
    figureDir = fullfile(p.rgcResources.figurePDFsDir, exportVisualizationPDFdirectory);

    % The video specs
    theVideoFileName = sprintf('%s/allConePoolingRFmaps',figureDir);
	videoOBJ = VideoWriter(theVideoFileName, 'MPEG-4'); 
	videoOBJ.FrameRate = 30;
	videoOBJ.Quality = 100;
	videoOBJ.open();

    % The desired ROI
    theROI = regionOfInterest(...
        'geometryStruct', struct(...
            'units', 'degs', ...
            'shape', 'rect', ...
            'center', theMRGCmosaic.eccentricityDegs, ...
            'width', theMRGCmosaic.sizeDegs(1), ...
            'height', 0.1, ...
            'rotation', 0.0...
        ));

    visualizedMRGCindices = theROI.indicesOfPointsInside(theMRGCmosaic.rgcRFpositionsDegs);
    [~,idx] = sort(sqrt(sum(theMRGCmosaic.rgcRFpositionsDegs(visualizedMRGCindices,:).^2,2)), 'ascend');
    visualizedMRGCindices = visualizedMRGCindices(idx);

    domainVisualizationLimits(1:2) = theMRGCmosaic.eccentricityDegs(1) + 1.1*theMRGCmosaic.sizeDegs(1)/2 * [-1 1];
    domainVisualizationLimits(3:4) = theMRGCmosaic.eccentricityDegs(2) + 1.1*theMRGCmosaic.sizeDegs(2)/2 * [-1 1];


    % Include surround cones whose pooling weights are >= 0.001
    minSurroundConeWeight = 0.001;

    % Generate the video
    hFig = figure(500); clf;
    set(hFig, 'Position', [10 10 1024 1024]);
    ax = subplot(1,1,1);

    for iRGC = 1:numel(visualizedMRGCindices)

        domainVisualizationTicks.x = [domainVisualizationLimits(1) theMRGCmosaic.rgcRFpositionsDegs(visualizedMRGCindices(iRGC),1) domainVisualizationLimits(2)];
        domainVisualizationTicks.y = [domainVisualizationLimits(3) theMRGCmosaic.rgcRFpositionsDegs(visualizedMRGCindices(iRGC),2) domainVisualizationLimits(4)];

        theMRGCmosaic.visualizeCenterSurroundConePoolingMap(visualizedMRGCindices(iRGC), ...
            'minConeWeightForVisualizingRFcenterPooling', minCenterConeWeight, ...
            'minConeWeightForVisualizingRFsurroundPooling', minSurroundConeWeight, ...
            'minSurroundConeWeightRelativity', 'center', ...
            'spatialSupportTickSeparationArcMin', spatialSupportTickSeparationArcMin, ...
            'scaleBarDegs', scaleBarDegs, ...
            'doNotLabelScaleBar', true, ...
            'plotTitle', sprintf('RGC #%d', visualizedMRGCindices(iRGC)), ...
            'axesToRenderIn', ax, ...
            'withCustomFigureFormat', '1x1 giant rectangular-wide mosaic', ...
            'domainVisualizationLimits', domainVisualizationLimits, ...
            'domainVisualizationTicks', domainVisualizationTicks);
        drawnow;
		videoOBJ.writeVideo(getframe(hFig));
    end
    videoOBJ.close();

end
