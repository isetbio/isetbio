function t_generateMRGCmosaicAtStage2(options)
% Generate an mRGC mosaic at different stages of cone-to-mRGC RF center connectivity
%
% Syntax:
%   t_generateMRGCmosaicAtStage2;
%
% Description:
%   Demonstrates how to generate an mRGC mosaic at stage 2A or 2C of connectivity
%   At stage 2A cones are connected to RGC RF centers in a
%   mutually-exclusive way (no RF center overlap). It is at this stage that
%   the user can specity the desired spatialChromaticUniformityTradeoff
%   At stage 2C cone connections diverge to nearby RGC RF centers
%   generating overlap between neighboring RF centers
%
%  This is set up with key/value pairs that demonstate how to select different
%  options. Different choices are illustrated in the examples
%  in the source code.
%
% Optional key/value pairs
%    See source code arguments block for a list of key/value pairs.

% History:
%    08/28/25  NPC  Wrote it.

% Examples:
%{
    % Visualize the default center-connected mRGC mosaic 
    % using the default minimum visualized center cone weights
    t_generateMRGCmosaicAtStage2(...
        'visualizeMosaicAtStage2C', true);


    % Visualize the default center-connected mRGC mosaic using the smallest
    % minimum visualized center cone weight
    t_generateMRGCmosaicAtStage2(...
        'rgcMosaicName', 'PLOSpaperNasal10DegsMosaic', ...
        'visualizeMosaicAtStage2C', true, ...
        'domainVisualizationLimits', [8 12 1.5 5.5], ...
        'minConeWeightVisualized', mRGCMosaic.minSensitivityForInclusionOfDivergentConeConnections ...
    );


    % Visualize the default center-connected mRGC mosaic using the 
    % noise floor in the measurements of cone weights 
    % according to Greg Field and which is what they used in Fig 4 of their 2010 paper.
    t_generateMRGCmosaicAtStage2(...
        'rgcMosaicName', 'PLOSpaperNasal7DegsMosaic', ...
        'visualizeMosaicAtStage2AB', true, ...
        'visualizeMosaicAtStage2C', false, ...
        'inputConesAlpha', 0.6, ...
        'identifyInputCones', true, ...
        'identifyPooledCones', true, ...
        'domainVisualizationLimits', [10.0 11.0 4.0 5.0], ...
        'closeOpenFigures', true, ...
        'figNo', 1000, ...
        'figureFormat', '1x1 giant square mosaic', ...
        'minConeWeightVisualized', mRGCMosaic.minRFcenterConeWeightIncludedToMatchFigure4OfFieldEtAl2010 ...
    );

    % Visualize the default center-connected mRGC mosaic using the 
    % noise floor in the measurements of cone weights 
    % according to Greg Field and which is what they used in Fig 4 of their 2010 paper.
    t_generateMRGCmosaicAtStage2(...
        'rgcMosaicName', 'PLOSpaperNasal7DegsMosaic', ...
        'visualizeMosaicAtStage2AB', false, ...
        'visualizeMosaicAtStage2C', true, ...
        'inputConesAlpha', 0.6, ...
        'identifyInputCones', true, ...
        'identifyPooledCones', true, ...
        'domainVisualizationLimits', [10.0 11.0 4.0 5.0], ...
        'closeOpenFigures', false, ...
        'figNo', 1001, ...
        'figureFormat', '1x1 giant square mosaic', ...
        'minConeWeightVisualized', mRGCMosaic.minRFcenterConeWeightIncludedToMatchFigure4OfFieldEtAl2010 ...
    );


    % Generate a tiny center-connected mRGC mosaic at 2 degrees (stage 2A/B only
    % so no divergent connections)
    t_generateMRGCmosaicAtStage2(...
        'rgcMosaicName', 'PLOSpaperNasal2DegsTinyMosaic', ...
        'regenerateMosaicAtStage2AB', true, ...
        'visualizeMosaicAtStage2AB', true, ...
        'identifyInputCones', true, ...
        'identifyPooledCones', true);


    % Generate a tiny center-connected mRGC mosaic at 2 degrees (stage 2C
    % i.e., with divergent connections)
    t_generateMRGCmosaicAtStage2(...
        'rgcMosaicName', 'PLOSpaperNasal2DegsTinyMosaic', ...
        'regenerateMosaicAtStage2C', true, ...
        'visualizeMosaicAtStage2C', true, ...
        'identifyInputCones', true, ...
        'identifyPooledCones', true);



%}


arguments
    % ---- Name encoding properties of the rgcMosaic, such as its eccentricity ---
    % See RGCMosaicConstructor.helper.utils.initializeRGCMosaicGenerationParameters
    % for what is available and to add new mosaics
    options.rgcMosaicName (1,:) ...
        char ...
        {...
        mustBeMember(options.rgcMosaicName, ...
            { ...
            'PLOSpaperNasal25DegsMosaic' ...
            'PLOSpaperNasal19DegsMosaic' ...
            'PLOSpaperNasal14DegsMosaic' ...
            'PLOSpaperNasal10DegsMosaic' ...
            'PLOSpaperNasal7DegsMosaic' ...
            'PLOSpaperNasal2DegsTinyMosaic' ...
            'PLOSpaperFovealMosaic' ...
            'PLOSpaperTemporal2DegsMosaic' ...
            'PLOSpaperTemporal4DegsMosaic' ...
            'PLOSpaperTemporal7DegsMosaic' ...
            'PLOSpaperTemporal10DegsMosaic' ...
            'PLOSpaperTemporal14DegsMosaic' ...
            'PLOSpaperTemporal19DegsMosaic' ...
            'PLOSpaperTemporal25DegsMosaic' ...
            'PLOSpaperTemporal32DegsMosaic' ...
            } ...
            ) ...
        } ...
        = 'PLOSpaperTemporal7DegsMosaic';


    % ---- Which species to employ ----
    % Choose between {'macaque', 'human'}. If 'macaque' is chosen, the input
    % cone mosaic has a 1:1 L/M cone ratio.
    options.coneMosaicSpecies  (1,:) char {mustBeMember(options.coneMosaicSpecies,{'human','macaque'})} = 'human';


    % ----- Which subject optics to employ -----
    options.opticsSubjectName (1,:) ...
        char ...
        {...
        mustBeMember(options.opticsSubjectName, ...
            { ...
            'PLOSpaperDefaultSubject' ...
            'PLOSpaperSecondSubject' ...
            'VSS2024TalkFirstSubject' ...
            'VSS2024TalkSecondSubject' ...
            'PLOSpaperStrehlRatio_0.87' ...
            'PLOSpaperStrehlRatio_0.72' ...
            'PLOSpaperStrehlRatio_0.59' ...
            'PLOSpaperStrehlRatio_0.60' ...
            'PLOSpaperStrehlRatio_0.27' ...
            'PLOSpaperStrehlRatio_0.23' ...
            'PLOSpaperStrehlRatio_0.21' ...
            'PLOSpaperStrehlRatio_0.19' ...
            'PLOSpaperStrehlRatio_0.09' ...
            } ...
            ) ...
        } ...
        = 'PLOSpaperSecondSubject';


    % ------ spatialChromaticUniformityTradeoff parameter ----
    % A value of 1 corresponds to maximal spatial homogeneity
    % A value of 0 corresponds to maximal spectral purity
    options.spatialChromaticUniformityTradeoff (1,1) double =  1.0; 

    % ---- Choices of actions to perform ----
    % Whether to regenerate the mosaic at stage2AB
    options.regenerateMosaicAtStage2AB (1,1) logical = false;

    % Whether to regenerate the mosaic at stage2C
    options.regenerateMosaicAtStage2C (1,1) logical = false;

    % Whether to visualize the mosaic at stage2AB
    options.visualizeMosaicAtStage2AB (1,1) logical = false;

    % Whether to visualize the mosaic at stage2C (final stage)
    options.visualizeMosaicAtStage2C (1,1) logical = false;


    % ---- Visualization options ----
    % Visualization domain:
    % If empty, we are visualizing the entire mosaic
    % If not empty, it must be a 4-element vector containing the 
    % min and max values of x and y eccentricities (degs): [xMin xMax yMin yMax]
    options.domainVisualizationLimits = [];

    % Input cones alpha (transparency) value
    options.inputConesAlpha (1,1) double = 0.5;

    % Whether to identify the input cones for each mRGC RF center
    options.identifyInputCones (1,1) logical = false

    % Whether to identify the pooling of the input cones for each mRGC RF center
    options.identifyPooledCones (1,1) logical = false;

    % Minimum cone weight visualized: only has an effect for stage 2C mosaics
    % that contain divergent cone to RGC RF center connections, which have non-binary weights
    % Between 0 and 1
    %
    % Some pre-defined options are:
    % Weight for a representation similar to that of Chichilnisky labs
    % This is specified as: mRGCMosaic.sensitivityAtPointOfOverlap
    %
    % Weight = 10%, which is the noise floor in the measurements of cone weights 
    % according to Greg Field and which is what they used in Fig 4 of their 2010 paper.
    % This is specified as: mRGCMosaic.minRFcenterConeWeightIncludedToMatchFigure4OfFieldEtAl2010
    %
    % Weight = 1%, the min sensitivity for inclusion of divergent cone
    % connections in the model
    % This is specified as: = mRGCMosaic.minSensitivityForInclusionOfDivergentConeConnections
    %
    options.minConeWeightVisualized (1,1) double = mRGCMosaic.sensitivityAtPointOfOverlap; 


    % Graphic export options.
    % Graphics are exported in the directory returned by calling
    % RGCMosaicConstructor.filepathFor.rawFigurePDFsDir()
    % The above function computes this directory based on the
    % isetbio pref `rgcResources.figurePDFsDir` which must be set by the
    % user to the desired directory
    options.exportVisualizationPNG (1,1) logical = false;
    options.exportVisualizationPDF (1,1) logical = false;

    % Figure format
    % Specify one of the available figure formats, e.g. '1x1 giant square mosaic'
    % To see the availabe figure format checkPublicationReadyPlotLib.figureComponents()
    options.figureFormat (1,:) char = '';

    % Whether to close previously open figures
    options.closeOpenFigures (1,1) logical = true;

    % Figure number
    options.figNo = [];
end % arguments



% Set flags from key/value pairs
rgcMosaicName = options.rgcMosaicName;
coneMosaicSpecies = options.coneMosaicSpecies;
opticsSubjectName = options.opticsSubjectName;
spatialChromaticUniformityTradeoff = options.spatialChromaticUniformityTradeoff;

% Actions to perform
regenerateMosaicAtStage2A = options.regenerateMosaicAtStage2AB;
regenerateMosaicAtStage2C = options.regenerateMosaicAtStage2C;
visualizeMosaicAtStage2A = options.visualizeMosaicAtStage2AB;
visualizeMosaicAtStage2C = options.visualizeMosaicAtStage2C;

% Visualization options
domainVisualizationLimits = options.domainVisualizationLimits;
inputConesAlpha = options.inputConesAlpha;
identifyInputCones = options.identifyInputCones;
identifyPooledCones = options.identifyPooledCones;
minConeWeightVisualized = options.minConeWeightVisualized;


% Graphic export options
exportVisualizationPNG = options.exportVisualizationPNG;
exportVisualizationPDF = options.exportVisualizationPDF;

figureFormat = options.figureFormat;

% Close previously open figures
closePreviouslyOpenFigures = options.closeOpenFigures;

% Figure no to generate
figNo = options.figNo;

if (closePreviouslyOpenFigures)
    % Close any stray figs
    close all;
end


% Generate the necessary mosaic params struct
pStruct = RGCMosaicConstructor.helper.utils.initializeRGCMosaicGenerationParameters(...
    coneMosaicSpecies, opticsSubjectName, rgcMosaicName, '');

% Cone types pooled by the RF center
coneTypesPooledByRFcenter = [cMosaic.LCONE_ID cMosaic.MCONE_ID];


if (regenerateMosaicAtStage2A)
    % Set the random seed so we get same cone assignments in the inputConeMosaic
    randomSeedForFreezingCmosaicConeAssignment = 1;
    
    % Optimization center: detemines the order in which RFs are optimized
    optimizationCenter = 'localSpacing'; % 'origin'; % localSpacing'; 'localConeToRGCdensityRatio'

    % Determine the max number of cones that can be
    % transferred or swapped between nearby RF centers, depending on
    % the mosaic eccentricity
    [maxConeInputsPerRGCToConsiderTransferToNearbyRGCs, ...
     maxConeInputsPerRGCToConsiderSwappingWithNearbyRGCs] = ...
        MosaicConnector.coneTransferAndSwapLimits(pStruct.rgcMosaicSurroundOptimization.mosaicEccDegs);
    
    % Generate the RF center overlap - specific params
    rfCenterConnectivityParams = struct(...
            'optimizationCenter', optimizationCenter, ...
            'spatialChromaticUniformityTradeoff',  spatialChromaticUniformityTradeoff, ...
            'coneTypesToBeConnected', coneTypesPooledByRFcenter, ...
            'maxNeighborNormDistance', MosaicConnector.maxNeighborNormDistance, ...
            'maxNeighborsNum', MosaicConnector.maxNeighborsNum, ...
            'localSpacingFromCurrentCentroids', true, ...
            'maxConeInputsPerRGCToConsiderTransferToNearbyRGCs', maxConeInputsPerRGCToConsiderTransferToNearbyRGCs, ...
            'maxConeInputsPerRGCToConsiderSwappingWithNearbyRGCs', maxConeInputsPerRGCToConsiderSwappingWithNearbyRGCs, ...
            'maxPassesNum', 10, ...
            'visualizeIntermediateStagesOfCenterConnectivityOptimization', ~true, ...
            'saveIntermediateStagesOfCenterConnectivityOptimization', true);
    

    % Generate the center-connected (no RF center ovelap) mRGCMosaic
    [theCenterConnectedMRGCMosaicFullFileName, ...
     theIntermediateConnectivityStageMetaDataFile, ...
     theCenterConnectedMRGCMosaicFileName] = RGCMosaicConstructor.compute.centerConnectedMosaic(...
        pStruct.whichEye, ...
        pStruct.rgcMosaicSurroundOptimization.mosaicEccDegs, ...
        pStruct.rgcMosaicSurroundOptimization.mosaicSizeDegs, ...
        rfCenterConnectivityParams,  ...
        pStruct.sourceLatticeSizeDegs, ...
        'randomSeed', randomSeedForFreezingCmosaicConeAssignment, ...
        'customLMSconeDensities', pStruct.customLMSconeDensities);
end


if (regenerateMosaicAtStage2C)
    % Load a previously-generated mosaic at stage 2A
    centerConnectedParamsStruct = struct(...
        'whichEye', pStruct.whichEye, ...
        'eccentricityDegs', pStruct.rgcMosaicSurroundOptimization.mosaicEccDegs, ...
        'sizeDegs', pStruct.rgcMosaicSurroundOptimization.mosaicSizeDegs, ...
        'spatialChromaticUniformityTradeoff', spatialChromaticUniformityTradeoff, ...
        'customLMSconeDensities', pStruct.customLMSconeDensities);
    
    [theCenterConnectedMRGCMosaicFullFileName, ~, ...
     theCenterConnectedMRGCMosaicFileName] = ...
        RGCMosaicConstructor.filepathFor.exportedMosaicFileName(...
                centerConnectedParamsStruct, 'center connected');

    fprintf('Loading center-connected (stage 2A) MRGC mosaic from\n\t%s\n', theCenterConnectedMRGCMosaicFullFileName);
    % Load the center-connected mRGCMosaic
    load(theCenterConnectedMRGCMosaicFullFileName, 'theMRGCMosaic');

    % RF center overlap params
    rfCenterOverlapParams = struct(...
        'sensitivityAtPointOfOverlap', mRGCMosaic.sensitivityAtPointOfOverlap, ...  
        'minSensitivityForInclusion', mRGCMosaic.minSensitivityForInclusionOfDivergentConeConnections, ...
        'maxNumberOfConesOutsideContour', 0, ...
        'overlappingWeightsDivergencePattern', 'inLineWithExclusiveConnections', ...  % choose from {'isotropic', 'inLineWithExclusiveConnections', 'orthogonalToExclusiveConnections'}
        'coneTypesIncluded', coneTypesPooledByRFcenter);

    % Generate RF center overlap
    theMRGCMosaic.generateRFcenterOverlap(rfCenterOverlapParams, ...
                'visualizeGenerationOfOverlappingRFcenterWeights', false, ...
                'minConeWeightVisualized', exp(-4), ...
                'visualizeMinSensitivityForInclusion', false, ...
                'visualizeSensitivityAtPointOfOverlap', false, ...
                'visualizeGauthierSensitivityAtPointOfOverlap', false);

    % Generate filename for exported mosaic
    [theCenterConnectedMRGCMosaicFullFileName, ~, ...
     theCenterConnectedMRGCMosaicFileName] = ...
        RGCMosaicConstructor.filepathFor.exportedMosaicFileName(...
            centerConnectedParamsStruct, 'center connected with overlap', ...
            'generateMissingSubDirs', true);
  
    % Export the RF center overlapping mosaic
    save(theCenterConnectedMRGCMosaicFullFileName, 'theMRGCMosaic', '-v7.3');
    fprintf('The center-connected MRGC mosaic with RF center overlap (stage 2C) was saved to: \n\t%s\n', theCenterConnectedMRGCMosaicFullFileName);
end


if (visualizeMosaicAtStage2A)
    % Load a previously-generated mosaic at stage 2A
    centerConnectedParamsStruct = struct(...
        'whichEye', pStruct.whichEye, ...
        'eccentricityDegs', pStruct.rgcMosaicSurroundOptimization.mosaicEccDegs, ...
        'sizeDegs', pStruct.rgcMosaicSurroundOptimization.mosaicSizeDegs, ...
        'spatialChromaticUniformityTradeoff', spatialChromaticUniformityTradeoff, ...
        'customLMSconeDensities', pStruct.customLMSconeDensities);
    
    [theCenterConnectedMRGCMosaicFullFileName, ~, ...
     theCenterConnectedMRGCMosaicFileName] = ...
        RGCMosaicConstructor.filepathFor.exportedMosaicFileName(...
                centerConnectedParamsStruct, 'center connected');

    fprintf('Loading center-connected (stage 2A) MRGC mosaic from\n\t%s\n', theCenterConnectedMRGCMosaicFullFileName);
    % Load the center-connected mRGCMosaic
    load(theCenterConnectedMRGCMosaicFullFileName, 'theMRGCMosaic');
end

if (visualizeMosaicAtStage2C)
    % Load a previously-generated mosaic at stage 2C
    centerConnectedParamsStruct = struct(...
        'whichEye', pStruct.whichEye, ...
        'eccentricityDegs', pStruct.rgcMosaicSurroundOptimization.mosaicEccDegs, ...
        'sizeDegs', pStruct.rgcMosaicSurroundOptimization.mosaicSizeDegs, ...
        'spatialChromaticUniformityTradeoff', spatialChromaticUniformityTradeoff, ...
        'customLMSconeDensities', pStruct.customLMSconeDensities);

    % Generate filename for exported mosaic
    [theCenterConnectedMRGCMosaicFullFileName, ~, ...
     theCenterConnectedMRGCMosaicFileName] = ...
        RGCMosaicConstructor.filepathFor.exportedMosaicFileName(...
            centerConnectedParamsStruct, 'center connected with overlap');
  
    fprintf('Loading center-connected (stage 2C) MRGC mosaic from\n\t%s\n', theCenterConnectedMRGCMosaicFullFileName);
    % Load the center-connected mRGCMosaic
    load(theCenterConnectedMRGCMosaicFullFileName, 'theMRGCMosaic');
end


if (visualizeMosaicAtStage2A || visualizeMosaicAtStage2C)
    visualizationParamsStruct = struct(...
        'maxNumberOfConesOutsideContour', 0);

    if (isempty(figureFormat))
        if (isempty(domainVisualizationLimits))
            figureFormat = PublicationReadyPlotLib.figureComponents('1x1 giant square mosaic');
        else
            figureFormat = PublicationReadyPlotLib.figureComponents('1x1 double width figure');
        end
    else
        figureFormat = PublicationReadyPlotLib.figureComponents(figureFormat);
    end


    RGCMosaicConstructor.visualize.fullMosaic(...
        theCenterConnectedMRGCMosaicFullFileName, ...
        theCenterConnectedMRGCMosaicFileName, ...
        minConeWeightVisualized, ...
        visualizationParamsStruct, ...
        'figNo', figNo, ...
        'identifyInputCones', identifyInputCones, ...
        'identifyPooledCones', identifyPooledCones, ...
        'inputConesAlpha', inputConesAlpha, ...
        'withFigureFormat', figureFormat, ...
        'domainVisualizationLimits', domainVisualizationLimits, ...
        'domainVisualizationTicks', struct('x', -50:0.5:50, 'y', -50:0.5:50), ...
        'withoutPlotTitle', true, ...
        'exportVisualizationPNG', exportVisualizationPNG, ...
        'exportVisualizationPDF', exportVisualizationPDF);
end


end


